
Godplease.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d78  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08005e88  08005e88  00006e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006274  08006274  000081dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006274  08006274  00007274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800627c  0800627c  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800627c  0800627c  0000727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006284  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  08006460  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006460  00008450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9b1  00000000  00000000  00008205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd8  00000000  00000000  00015bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00017b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6b  00000000  00000000  00018a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e01  00000000  00000000  0001959b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f921  00000000  00000000  0003239c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3fc  00000000  00000000  00041cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d00b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  000d00fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d4e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e70 	.word	0x08005e70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005e70 	.word	0x08005e70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000a92:	f107 020f 	add.w	r2, r7, #15
 8000a96:	1df9      	adds	r1, r7, #7
 8000a98:	2364      	movs	r3, #100	@ 0x64
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <RC522_SPI_Transfer+0x28>)
 8000aa0:	f001 fe0c 	bl	80026bc <HAL_SPI_TransmitReceive>

	return rx_data;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200001f8 	.word	0x200001f8

08000ab4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <Write_MFRC522+0x4c>)
 8000acc:	f001 f928 	bl	8001d20 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffd3 	bl	8000a88 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ffcf 	bl	8000a88 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <Write_MFRC522+0x4c>)
 8000af2:	f001 f915 	bl	8001d20 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b14:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <Read_MFRC522+0x54>)
 8000b16:	f001 f903 	bl	8001d20 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ffa9 	bl	8000a88 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff ffa6 	bl	8000a88 <RC522_SPI_Transfer>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b46:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <Read_MFRC522+0x54>)
 8000b48:	f001 f8ea 	bl	8001d20 <HAL_GPIO_WritePin>

	return val;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffc8 	bl	8000b04 <Read_MFRC522>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000b78:	7bfa      	ldrb	r2, [r7, #15]
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff95 	bl	8000ab4 <Write_MFRC522>
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffad 	bl	8000b04 <Read_MFRC522>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000bae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	b25a      	sxtb	r2, r3
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff75 	bl	8000ab4 <Write_MFRC522>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000bd6:	2014      	movs	r0, #20
 8000bd8:	f7ff ff94 	bl	8000b04 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000bdc:	2103      	movs	r1, #3
 8000bde:	2014      	movs	r0, #20
 8000be0:	f7ff ffbc 	bl	8000b5c <SetBitMask>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000bec:	210f      	movs	r1, #15
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ff60 	bl	8000ab4 <Write_MFRC522>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c02:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <MFRC522_Init+0x58>)
 8000c04:	f001 f88c 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <MFRC522_Init+0x58>)
 8000c0e:	f001 f887 	bl	8001d20 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000c12:	f7ff ffe9 	bl	8000be8 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000c16:	218d      	movs	r1, #141	@ 0x8d
 8000c18:	202a      	movs	r0, #42	@ 0x2a
 8000c1a:	f7ff ff4b 	bl	8000ab4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000c1e:	213e      	movs	r1, #62	@ 0x3e
 8000c20:	202b      	movs	r0, #43	@ 0x2b
 8000c22:	f7ff ff47 	bl	8000ab4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000c26:	211e      	movs	r1, #30
 8000c28:	202d      	movs	r0, #45	@ 0x2d
 8000c2a:	f7ff ff43 	bl	8000ab4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	202c      	movs	r0, #44	@ 0x2c
 8000c32:	f7ff ff3f 	bl	8000ab4 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000c36:	2140      	movs	r1, #64	@ 0x40
 8000c38:	2015      	movs	r0, #21
 8000c3a:	f7ff ff3b 	bl	8000ab4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000c3e:	213d      	movs	r1, #61	@ 0x3d
 8000c40:	2011      	movs	r0, #17
 8000c42:	f7ff ff37 	bl	8000ab4 <Write_MFRC522>

	AntennaOn();
 8000c46:	f7ff ffc4 	bl	8000bd2 <AntennaOn>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	4613      	mov	r3, r2
 8000c64:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000c66:	2302      	movs	r3, #2
 8000c68:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	d006      	beq.n	8000c86 <MFRC522_ToCard+0x32>
 8000c78:	2b0e      	cmp	r3, #14
 8000c7a:	d109      	bne.n	8000c90 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000c7c:	2312      	movs	r3, #18
 8000c7e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000c80:	2310      	movs	r3, #16
 8000c82:	777b      	strb	r3, [r7, #29]
			break;
 8000c84:	e005      	b.n	8000c92 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000c86:	2377      	movs	r3, #119	@ 0x77
 8000c88:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000c8a:	2330      	movs	r3, #48	@ 0x30
 8000c8c:	777b      	strb	r3, [r7, #29]
			break;
 8000c8e:	e000      	b.n	8000c92 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000c90:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000c92:	7fbb      	ldrb	r3, [r7, #30]
 8000c94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f7ff ff09 	bl	8000ab4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f7ff ff74 	bl	8000b92 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	200a      	movs	r0, #10
 8000cae:	f7ff ff55 	bl	8000b5c <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fefd 	bl	8000ab4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	e00a      	b.n	8000cd6 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2009      	movs	r0, #9
 8000ccc:	f7ff fef2 	bl	8000ab4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3f0      	bcc.n	8000cc0 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fee6 	bl	8000ab4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b0c      	cmp	r3, #12
 8000cec:	d103      	bne.n	8000cf6 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000cee:	2180      	movs	r1, #128	@ 0x80
 8000cf0:	200d      	movs	r0, #13
 8000cf2:	f7ff ff33 	bl	8000b5c <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000cf6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cfa:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000cfc:	2004      	movs	r0, #4
 8000cfe:	f7ff ff01 	bl	8000b04 <Read_MFRC522>
 8000d02:	4603      	mov	r3, r0
 8000d04:	773b      	strb	r3, [r7, #28]
        i--;
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <MFRC522_ToCard+0xd4>
 8000d12:	7f3b      	ldrb	r3, [r7, #28]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <MFRC522_ToCard+0xd4>
 8000d1c:	7f3a      	ldrb	r2, [r7, #28]
 8000d1e:	7f7b      	ldrb	r3, [r7, #29]
 8000d20:	4013      	ands	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0e9      	beq.n	8000cfc <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	200d      	movs	r0, #13
 8000d2c:	f7ff ff31 	bl	8000b92 <ClearBitMask>

    if (i != 0)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d052      	beq.n	8000ddc <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000d36:	2006      	movs	r0, #6
 8000d38:	f7ff fee4 	bl	8000b04 <Read_MFRC522>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f003 031b 	and.w	r3, r3, #27
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d148      	bne.n	8000dd8 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000d4a:	7f3a      	ldrb	r2, [r7, #28]
 8000d4c:	7fbb      	ldrb	r3, [r7, #30]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	2b0c      	cmp	r3, #12
 8000d62:	d13b      	bne.n	8000ddc <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f7ff fecd 	bl	8000b04 <Read_MFRC522>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000d6e:	200c      	movs	r0, #12
 8000d70:	f7ff fec8 	bl	8000b04 <Read_MFRC522>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000d82:	7f3b      	ldrb	r3, [r7, #28]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	00da      	lsls	r2, r3, #3
 8000d88:	7dfb      	ldrb	r3, [r7, #23]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e004      	b.n	8000d9e <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000d94:	7f3b      	ldrb	r3, [r7, #28]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d9c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000d9e:	7f3b      	ldrb	r3, [r7, #28]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000da8:	7f3b      	ldrb	r3, [r7, #28]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d901      	bls.n	8000db2 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000dae:	2310      	movs	r3, #16
 8000db0:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	e00a      	b.n	8000dce <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	18d4      	adds	r4, r2, r3
 8000dbe:	2009      	movs	r0, #9
 8000dc0:	f7ff fea0 	bl	8000b04 <Read_MFRC522>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	7f3b      	ldrb	r3, [r7, #28]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3f0      	bcc.n	8000db8 <MFRC522_ToCard+0x164>
 8000dd6:	e001      	b.n	8000ddc <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000ddc:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}

08000de6 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af02      	add	r7, sp, #8
 8000dec:	4603      	mov	r3, r0
 8000dee:	6039      	str	r1, [r7, #0]
 8000df0:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000df2:	2107      	movs	r1, #7
 8000df4:	200d      	movs	r0, #13
 8000df6:	f7ff fe5d 	bl	8000ab4 <Write_MFRC522>

	TagType[0] = reqMode;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	200c      	movs	r0, #12
 8000e0e:	f7ff ff21 	bl	8000c54 <MFRC522_ToCard>
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <MFRC522_Request+0x3c>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b10      	cmp	r3, #16
 8000e20:	d001      	beq.n	8000e26 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000e22:	2302      	movs	r3, #2
 8000e24:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	200d      	movs	r0, #13
 8000e40:	f7ff fe38 	bl	8000ab4 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2293      	movs	r2, #147	@ 0x93
 8000e48:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2220      	movs	r2, #32
 8000e50:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f7ff fef8 	bl	8000c54 <MFRC522_ToCard>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d118      	bne.n	8000ea0 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73bb      	strb	r3, [r7, #14]
 8000e72:	e009      	b.n	8000e88 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	4053      	eors	r3, r2
 8000e80:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	3301      	adds	r3, #1
 8000e86:	73bb      	strb	r3, [r7, #14]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d9f2      	bls.n	8000e74 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	7b7a      	ldrb	r2, [r7, #13]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d001      	beq.n	8000ea0 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fc1d 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f8bb 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f9ab 	bl	8001214 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 f97f 	bl	80011c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ec2:	f000 f8fb 	bl	80010bc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ec6:	f000 f92f 	bl	8001128 <MX_TIM2_Init>
  HAL_TIM_Base_Start(&htim2);
 8000eca:	484f      	ldr	r0, [pc, #316]	@ (8001008 <main+0x15c>)
 8000ecc:	f001 fea8 	bl	8002c20 <HAL_TIM_Base_Start>

  MFRC522_Init();
 8000ed0:	f7ff fe92 	bl	8000bf8 <MFRC522_Init>
  /* USER CODE BEGIN 2 */


HAL_UART_Transmit(&huart2, (uint8_t*)"RFID Reader Started\r\n", 21, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	2215      	movs	r2, #21
 8000eda:	494c      	ldr	r1, [pc, #304]	@ (800100c <main+0x160>)
 8000edc:	484c      	ldr	r0, [pc, #304]	@ (8001010 <main+0x164>)
 8000ede:	f002 f963 	bl	80031a8 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
    /* USER CODE END WHILE */
	status = MFRC522_Request(PICC_REQIDL, str);
 8000ee2:	494c      	ldr	r1, [pc, #304]	@ (8001014 <main+0x168>)
 8000ee4:	2026      	movs	r0, #38	@ 0x26
 8000ee6:	f7ff ff7e 	bl	8000de6 <MFRC522_Request>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b4a      	ldr	r3, [pc, #296]	@ (8001018 <main+0x16c>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		    status = MFRC522_Anticoll(str);
 8000ef2:	4848      	ldr	r0, [pc, #288]	@ (8001014 <main+0x168>)
 8000ef4:	f7ff ff9c 	bl	8000e30 <MFRC522_Anticoll>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b46      	ldr	r3, [pc, #280]	@ (8001018 <main+0x16c>)
 8000efe:	701a      	strb	r2, [r3, #0]

		    memcpy(sNum, str, 5);
 8000f00:	4b46      	ldr	r3, [pc, #280]	@ (800101c <main+0x170>)
 8000f02:	4a44      	ldr	r2, [pc, #272]	@ (8001014 <main+0x168>)
 8000f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f08:	6018      	str	r0, [r3, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	7019      	strb	r1, [r3, #0]
		    HAL_Delay(200);
 8000f0e:	20c8      	movs	r0, #200	@ 0xc8
 8000f10:	f000 fc50 	bl	80017b4 <HAL_Delay>

		    uint8_t currentCard = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
		    uint8_t validCardDetected = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71bb      	strb	r3, [r7, #6]

		    if(sNum[0] == 227 && sNum[1] == 32 && sNum[2] == 69 && sNum[3] == 53 && sNum[4] == 24)
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <main+0x170>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2be3      	cmp	r3, #227	@ 0xe3
 8000f22:	d12c      	bne.n	8000f7e <main+0xd2>
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <main+0x170>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	2b20      	cmp	r3, #32
 8000f2a:	d128      	bne.n	8000f7e <main+0xd2>
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <main+0x170>)
 8000f2e:	789b      	ldrb	r3, [r3, #2]
 8000f30:	2b45      	cmp	r3, #69	@ 0x45
 8000f32:	d124      	bne.n	8000f7e <main+0xd2>
 8000f34:	4b39      	ldr	r3, [pc, #228]	@ (800101c <main+0x170>)
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	2b35      	cmp	r3, #53	@ 0x35
 8000f3a:	d120      	bne.n	8000f7e <main+0xd2>
 8000f3c:	4b37      	ldr	r3, [pc, #220]	@ (800101c <main+0x170>)
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	2b18      	cmp	r3, #24
 8000f42:	d11c      	bne.n	8000f7e <main+0xd2>
		    {
		        currentCard = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]

		        if(lastCardDetected != 1)
 8000f48:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <main+0x174>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d046      	beq.n	8000fde <main+0x132>
		        {


		        	validCardDetected = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	71bb      	strb	r3, [r7, #6]
		            HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8000f54:	4b33      	ldr	r3, [pc, #204]	@ (8001024 <main+0x178>)
 8000f56:	681c      	ldr	r4, [r3, #0]
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <main+0x178>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f8f7 	bl	8000150 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	4828      	ldr	r0, [pc, #160]	@ (8001010 <main+0x164>)
 8000f6e:	f002 f91b 	bl	80031a8 <HAL_UART_Transmit>

		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	482c      	ldr	r0, [pc, #176]	@ (8001028 <main+0x17c>)
 8000f78:	f000 fed2 	bl	8001d20 <HAL_GPIO_WritePin>
		        if(lastCardDetected != 1)
 8000f7c:	e02f      	b.n	8000fde <main+0x132>
		        }
		    }
		    else if(sNum[0] == 35 && sNum[1] == 32 && sNum[2] == 83 && sNum[3] == 245 && sNum[4] == 174)
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <main+0x170>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b23      	cmp	r3, #35	@ 0x23
 8000f84:	d12b      	bne.n	8000fde <main+0x132>
 8000f86:	4b25      	ldr	r3, [pc, #148]	@ (800101c <main+0x170>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	2b20      	cmp	r3, #32
 8000f8c:	d127      	bne.n	8000fde <main+0x132>
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <main+0x170>)
 8000f90:	789b      	ldrb	r3, [r3, #2]
 8000f92:	2b53      	cmp	r3, #83	@ 0x53
 8000f94:	d123      	bne.n	8000fde <main+0x132>
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <main+0x170>)
 8000f98:	78db      	ldrb	r3, [r3, #3]
 8000f9a:	2bf5      	cmp	r3, #245	@ 0xf5
 8000f9c:	d11f      	bne.n	8000fde <main+0x132>
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <main+0x170>)
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	2bae      	cmp	r3, #174	@ 0xae
 8000fa4:	d11b      	bne.n	8000fde <main+0x132>
		    {
		        currentCard = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	71fb      	strb	r3, [r7, #7]

		        if(lastCardDetected != 2)
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <main+0x174>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d015      	beq.n	8000fde <main+0x132>
		        {

		        	validCardDetected = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71bb      	strb	r3, [r7, #6]
		            HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <main+0x180>)
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <main+0x180>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f8c6 	bl	8000150 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	4621      	mov	r1, r4
 8000fce:	4810      	ldr	r0, [pc, #64]	@ (8001010 <main+0x164>)
 8000fd0:	f002 f8ea 	bl	80031a8 <HAL_UART_Transmit>

		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4813      	ldr	r0, [pc, #76]	@ (8001028 <main+0x17c>)
 8000fda:	f000 fea1 	bl	8001d20 <HAL_GPIO_WritePin>
		        }
		    }

		    // Control buzzer - HIGH when valid card is detected
		    if(validCardDetected)
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <main+0x14a>
		    {
		        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <main+0x17c>)
 8000fea:	f000 fe99 	bl	8001d20 <HAL_GPIO_WritePin>
		        HAL_Delay(2000);
 8000fee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ff2:	f000 fbdf 	bl	80017b4 <HAL_Delay>
		    }

		    lastCardDetected = currentCard;
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <main+0x174>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	7013      	strb	r3, [r2, #0]

		    // Ensure buzzer is LOW at the end of each loop iteration
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2102      	movs	r1, #2
 8001000:	4809      	ldr	r0, [pc, #36]	@ (8001028 <main+0x17c>)
 8001002:	f000 fe8d 	bl	8001d20 <HAL_GPIO_WritePin>
{
 8001006:	e76c      	b.n	8000ee2 <main+0x36>
 8001008:	20000250 	.word	0x20000250
 800100c:	08005ec0 	.word	0x08005ec0
 8001010:	20000298 	.word	0x20000298
 8001014:	200002e4 	.word	0x200002e4
 8001018:	200002e0 	.word	0x200002e0
 800101c:	200002f4 	.word	0x200002f4
 8001020:	200002f9 	.word	0x200002f9
 8001024:	20000000 	.word	0x20000000
 8001028:	40010c00 	.word	0x40010c00
 800102c:	20000004 	.word	0x20000004

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 ffe5 	bl	800400e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001056:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001068:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800106c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800106e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fe8b 	bl	8001d94 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001084:	f000 f936 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f8f8 	bl	8002298 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ae:	f000 f921 	bl	80012f4 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3740      	adds	r7, #64	@ 0x40
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <MX_SPI1_Init+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010f0:	2210      	movs	r2, #16
 80010f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_SPI1_Init+0x64>)
 8001108:	220a      	movs	r2, #10
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_SPI1_Init+0x64>)
 800110e:	f001 fa51 	bl	80025b4 <HAL_SPI_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001118:	f000 f8ec 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001f8 	.word	0x200001f8
 8001124:	40013000 	.word	0x40013000

08001128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_TIM2_Init+0x94>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_TIM2_Init+0x94>)
 800114e:	2247      	movs	r2, #71	@ 0x47
 8001150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_TIM2_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_TIM2_Init+0x94>)
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_TIM2_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_TIM2_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116c:	4813      	ldr	r0, [pc, #76]	@ (80011bc <MX_TIM2_Init+0x94>)
 800116e:	f001 fd08 	bl	8002b82 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001178:	f000 f8bc 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001180:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_TIM2_Init+0x94>)
 800118a:	f001 fd93 	bl	8002cb4 <HAL_TIM_ConfigClockSource>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 f8ae 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_TIM2_Init+0x94>)
 80011a6:	f001 ff51 	bl	800304c <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b0:	f000 f8a0 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000250 	.word	0x20000250

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART2_UART_Init+0x4c>)
 80011f8:	f001 ff86 	bl	8003108 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f877 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000298 	.word	0x20000298
 8001210:	40004400 	.word	0x40004400

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a27      	ldr	r2, [pc, #156]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <MX_GPIO_Init+0xd0>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_9, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f244 2103 	movw	r1, #16899	@ 0x4203
 800128e:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <MX_GPIO_Init+0xd4>)
 8001290:	f000 fd46 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_GPIO_Init+0xd8>)
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_GPIO_Init+0xdc>)
 80012aa:	f000 fbb5 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_9;
 80012ae:	f244 2303 	movw	r3, #16899	@ 0x4203
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <MX_GPIO_Init+0xd4>)
 80012c8:	f000 fba6 	bl	8001a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2028      	movs	r0, #40	@ 0x28
 80012d2:	f000 fb6a 	bl	80019aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d6:	2028      	movs	r0, #40	@ 0x28
 80012d8:	f000 fb83 	bl	80019e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	10110000 	.word	0x10110000
 80012f0:	40011000 	.word	0x40011000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	@ (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_SPI_MspInit+0x88>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d12f      	bne.n	80013e4 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <HAL_SPI_MspInit+0x8c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <HAL_SPI_MspInit+0x8c>)
 800138a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_SPI_MspInit+0x8c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_SPI_MspInit+0x8c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <HAL_SPI_MspInit+0x8c>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_SPI_MspInit+0x8c>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013b4:	23a0      	movs	r3, #160	@ 0xa0
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <HAL_SPI_MspInit+0x90>)
 80013c8:	f000 fb26 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013cc:	2340      	movs	r3, #64	@ 0x40
 80013ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <HAL_SPI_MspInit+0x90>)
 80013e0:	f000 fb1a 	bl	8001a18 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40013000 	.word	0x40013000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010800 	.word	0x40010800

080013f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001408:	d10b      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <HAL_TIM_Base_MspInit+0x34>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a07      	ldr	r2, [pc, #28]	@ (800142c <HAL_TIM_Base_MspInit+0x34>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <HAL_TIM_Base_MspInit+0x34>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <HAL_UART_MspInit+0x70>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d123      	bne.n	8001498 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_UART_MspInit+0x74>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <HAL_UART_MspInit+0x74>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_UART_MspInit+0x74>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_UART_MspInit+0x74>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <HAL_UART_MspInit+0x74>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_UART_MspInit+0x74>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001480:	230c      	movs	r3, #12
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2302      	movs	r3, #2
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <HAL_UART_MspInit+0x78>)
 8001494:	f000 fac0 	bl	8001a18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40004400 	.word	0x40004400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <NMI_Handler+0x4>

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f93e 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001508:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800150c:	f000 fc20 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <_kill>:

int _kill(int pid, int sig)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152c:	f002 fdc2 	bl	80040b4 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	2216      	movs	r2, #22
 8001534:	601a      	str	r2, [r3, #0]
  return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_exit>:

void _exit (int status)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154a:	f04f 31ff 	mov.w	r1, #4294967295
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffe7 	bl	8001522 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <_exit+0x12>

08001558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
  }

  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e009      	b.n	80015b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf1      	blt.n	80015a4 <_write+0x12>
  }
  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_close>:

int _close(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f0:	605a      	str	r2, [r3, #4]
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f002 fd2a 	bl	80040b4 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20005000 	.word	0x20005000
 800168c:	00000400 	.word	0x00000400
 8001690:	200002fc 	.word	0x200002fc
 8001694:	20000450 	.word	0x20000450

08001698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a4:	f7ff fff8 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016aa:	490c      	ldr	r1, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016ac:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016c0:	4c09      	ldr	r4, [pc, #36]	@ (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f002 fcf7 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d2:	f7ff fbeb 	bl	8000eac <main>
  bx lr
 80016d6:	4770      	bx	lr
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016e0:	08006284 	.word	0x08006284
  ldr r2, =_sbss
 80016e4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016e8:	20000450 	.word	0x20000450

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_Init+0x28>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_Init+0x28>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f947 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fdf8 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f95f 	bl	80019fe <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f927 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000008 	.word	0x20000008
 8001774:	20000010 	.word	0x20000010
 8001778:	2000000c 	.word	0x2000000c

0800177c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_IncTick+0x1c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_IncTick+0x20>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a03      	ldr	r2, [pc, #12]	@ (800179c <HAL_IncTick+0x20>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000010 	.word	0x20000010
 800179c:	20000300 	.word	0x20000300

080017a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <HAL_GetTick+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000300 	.word	0x20000300

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fff0 	bl	80017a0 <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffe0 	bl	80017a0 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000010 	.word	0x20000010

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4906      	ldr	r1, [pc, #24]	@ (8001894 <__NVIC_EnableIRQ+0x34>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff90 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff2d 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff42 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff90 	bl	80018ec <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5f 	bl	8001898 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff35 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa2 	bl	8001950 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b08b      	sub	sp, #44	@ 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e169      	b.n	8001d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8158 	bne.w	8001cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a9a      	ldr	r2, [pc, #616]	@ (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d05e      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a54:	4a98      	ldr	r2, [pc, #608]	@ (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d875      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a98      	ldr	r2, [pc, #608]	@ (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d058      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a60:	4a96      	ldr	r2, [pc, #600]	@ (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d86f      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a66:	4a96      	ldr	r2, [pc, #600]	@ (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d052      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a6c:	4a94      	ldr	r2, [pc, #592]	@ (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d869      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a72:	4a94      	ldr	r2, [pc, #592]	@ (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d04c      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a78:	4a92      	ldr	r2, [pc, #584]	@ (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d863      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a92      	ldr	r2, [pc, #584]	@ (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d046      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a84:	4a90      	ldr	r2, [pc, #576]	@ (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d85d      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d82a      	bhi.n	8001ae4 <HAL_GPIO_Init+0xcc>
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d859      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a92:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <HAL_GPIO_Init+0x80>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001aed 	.word	0x08001aed
 8001aa0:	08001aff 	.word	0x08001aff
 8001aa4:	08001b41 	.word	0x08001b41
 8001aa8:	08001b47 	.word	0x08001b47
 8001aac:	08001b47 	.word	0x08001b47
 8001ab0:	08001b47 	.word	0x08001b47
 8001ab4:	08001b47 	.word	0x08001b47
 8001ab8:	08001b47 	.word	0x08001b47
 8001abc:	08001b47 	.word	0x08001b47
 8001ac0:	08001b47 	.word	0x08001b47
 8001ac4:	08001b47 	.word	0x08001b47
 8001ac8:	08001b47 	.word	0x08001b47
 8001acc:	08001b47 	.word	0x08001b47
 8001ad0:	08001b47 	.word	0x08001b47
 8001ad4:	08001b47 	.word	0x08001b47
 8001ad8:	08001b47 	.word	0x08001b47
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001b09 	.word	0x08001b09
 8001ae4:	4a79      	ldr	r2, [pc, #484]	@ (8001ccc <HAL_GPIO_Init+0x2b4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aea:	e02c      	b.n	8001b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e029      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	3304      	adds	r3, #4
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e024      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	3308      	adds	r3, #8
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e01f      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e01a      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e013      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	611a      	str	r2, [r3, #16]
          break;
 8001b32:	e009      	b.n	8001b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	615a      	str	r2, [r3, #20]
          break;
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          break;
 8001b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2bff      	cmp	r3, #255	@ 0xff
 8001b4c:	d801      	bhi.n	8001b52 <HAL_GPIO_Init+0x13a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_Init+0x13e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2bff      	cmp	r3, #255	@ 0xff
 8001b5c:	d802      	bhi.n	8001b64 <HAL_GPIO_Init+0x14c>
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x152>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	3b08      	subs	r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	210f      	movs	r1, #15
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	6a39      	ldr	r1, [r7, #32]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80b1 	beq.w	8001cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b98:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb0:	4a48      	ldr	r2, [pc, #288]	@ (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a40      	ldr	r2, [pc, #256]	@ (8001cd8 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_GPIO_Init+0x1ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3f      	ldr	r2, [pc, #252]	@ (8001cdc <HAL_GPIO_Init+0x2c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1e8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ce0 <HAL_GPIO_Init+0x2c8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1e0>
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c04:	2300      	movs	r3, #0
 8001c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c16:	492f      	ldr	r1, [pc, #188]	@ (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	492c      	ldr	r1, [pc, #176]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4928      	ldr	r1, [pc, #160]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	4922      	ldr	r1, [pc, #136]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	491e      	ldr	r1, [pc, #120]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c80:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4918      	ldr	r1, [pc, #96]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4914      	ldr	r1, [pc, #80]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d021      	beq.n	8001cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	490e      	ldr	r1, [pc, #56]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e021      	b.n	8001cfa <HAL_GPIO_Init+0x2e2>
 8001cb6:	bf00      	nop
 8001cb8:	10320000 	.word	0x10320000
 8001cbc:	10310000 	.word	0x10310000
 8001cc0:	10220000 	.word	0x10220000
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10120000 	.word	0x10120000
 8001ccc:	10110000 	.word	0x10110000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_GPIO_Init+0x304>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4909      	ldr	r1, [pc, #36]	@ (8001d1c <HAL_GPIO_Init+0x304>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f ae8e 	bne.w	8001a2c <HAL_GPIO_Init+0x14>
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	372c      	adds	r7, #44	@ 0x2c
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f806 	bl	8001d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e272      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8087 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db4:	4b92      	ldr	r3, [pc, #584]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d00c      	beq.n	8001dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d112      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5e>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd8:	d10b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dda:	4b89      	ldr	r3, [pc, #548]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d06c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x12c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d168      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e24c      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x76>
 8001dfc:	4b80      	ldr	r3, [pc, #512]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7f      	ldr	r2, [pc, #508]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e02e      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x98>
 8001e12:	4b7b      	ldr	r3, [pc, #492]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a7a      	ldr	r2, [pc, #488]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b78      	ldr	r3, [pc, #480]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a77      	ldr	r2, [pc, #476]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0xbc>
 8001e36:	4b72      	ldr	r3, [pc, #456]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a71      	ldr	r2, [pc, #452]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b6f      	ldr	r3, [pc, #444]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6e      	ldr	r2, [pc, #440]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e50:	4b6b      	ldr	r3, [pc, #428]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6a      	ldr	r2, [pc, #424]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b68      	ldr	r3, [pc, #416]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a67      	ldr	r2, [pc, #412]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fc96 	bl	80017a0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff fc92 	bl	80017a0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	@ 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e200      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0xe4>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fc82 	bl	80017a0 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fc7e 	bl	80017a0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1ec      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	4b53      	ldr	r3, [pc, #332]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x10c>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d063      	beq.n	8001f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ece:	4b4c      	ldr	r3, [pc, #304]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eda:	4b49      	ldr	r3, [pc, #292]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x18c>
 8001ee6:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	4b43      	ldr	r3, [pc, #268]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x176>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1c0      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4939      	ldr	r1, [pc, #228]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	e03a      	b.n	8001f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f28:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fc37 	bl	80017a0 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fc33 	bl	80017a0 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1a1      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4927      	ldr	r1, [pc, #156]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc16 	bl	80017a0 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fc12 	bl	80017a0 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e180      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03a      	beq.n	8002018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fbf6 	bl	80017a0 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fbf2 	bl	80017a0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e160      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f000 face 	bl	8002578 <RCC_Delay>
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fbdc 	bl	80017a0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fea:	e00f      	b.n	800200c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff fbd8 	bl	80017a0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d908      	bls.n	800200c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e146      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	42420000 	.word	0x42420000
 8002008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b92      	ldr	r3, [pc, #584]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e9      	bne.n	8001fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a6 	beq.w	8002172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b8b      	ldr	r3, [pc, #556]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a87      	ldr	r2, [pc, #540]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b82      	ldr	r3, [pc, #520]	@ (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b7f      	ldr	r3, [pc, #508]	@ (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7e      	ldr	r2, [pc, #504]	@ (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb99 	bl	80017a0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff fb95 	bl	80017a0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	@ 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e103      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b75      	ldr	r3, [pc, #468]	@ (800225c <HAL_RCC_OscConfig+0x4c8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x312>
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e02d      	b.n	8002102 <HAL_RCC_OscConfig+0x36e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x334>
 80020ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a69      	ldr	r2, [pc, #420]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	4b67      	ldr	r3, [pc, #412]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a66      	ldr	r2, [pc, #408]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	e01c      	b.n	8002102 <HAL_RCC_OscConfig+0x36e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d10c      	bne.n	80020ea <HAL_RCC_OscConfig+0x356>
 80020d0:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a60      	ldr	r2, [pc, #384]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	e00b      	b.n	8002102 <HAL_RCC_OscConfig+0x36e>
 80020ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a57      	ldr	r2, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d015      	beq.n	8002136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff fb49 	bl	80017a0 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff fb45 	bl	80017a0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0b1      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	4b4b      	ldr	r3, [pc, #300]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ee      	beq.n	8002112 <HAL_RCC_OscConfig+0x37e>
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff fb33 	bl	80017a0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff fb2f 	bl	80017a0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e09b      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d105      	bne.n	8002172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a3b      	ldr	r2, [pc, #236]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d061      	beq.n	800224c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d146      	bne.n	800221e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b33      	ldr	r3, [pc, #204]	@ (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff fb03 	bl	80017a0 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff faff 	bl	80017a0 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e06d      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	4b29      	ldr	r3, [pc, #164]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f0      	bne.n	800219e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c4:	d108      	bne.n	80021d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4921      	ldr	r1, [pc, #132]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a19      	ldr	r1, [r3, #32]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	430b      	orrs	r3, r1
 80021ea:	491b      	ldr	r1, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fad3 	bl	80017a0 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff facf 	bl	80017a0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e03d      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x46a>
 800221c:	e035      	b.n	800228a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fabc 	bl	80017a0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff fab8 	bl	80017a0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e026      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x498>
 800224a:	e01e      	b.n	800228a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e019      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCC_OscConfig+0x500>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0d0      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b67      	ldr	r3, [pc, #412]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4965      	ldr	r1, [pc, #404]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b63      	ldr	r3, [pc, #396]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b8      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f4:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a58      	ldr	r2, [pc, #352]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a52      	ldr	r2, [pc, #328]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	494d      	ldr	r1, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d040      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d115      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e073      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4936      	ldr	r1, [pc, #216]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002388:	f7ff fa0a 	bl	80017a0 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff fa06 	bl	80017a0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e053      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d210      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	4922      	ldr	r1, [pc, #136]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e032      	b.n	800244e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4916      	ldr	r1, [pc, #88]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	490e      	ldr	r1, [pc, #56]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002426:	f000 f821 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800242a:	4602      	mov	r2, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	490a      	ldr	r1, [pc, #40]	@ (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	5ccb      	ldrb	r3, [r1, r3]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_RCC_ClockConfig+0x1cc>)
 8002440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_ClockConfig+0x1d0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f968 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000
 800245c:	40021000 	.word	0x40021000
 8002460:	08005ed8 	.word	0x08005ed8
 8002464:	20000008 	.word	0x20000008
 8002468:	2000000c 	.word	0x2000000c

0800246c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x94>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x30>
 8002496:	2b08      	cmp	r3, #8
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x36>
 800249a:	e027      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x98>)
 800249e:	613b      	str	r3, [r7, #16]
      break;
 80024a0:	e027      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0c9b      	lsrs	r3, r3, #18
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x94>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	0c5b      	lsrs	r3, r3, #17
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_RCC_GetSysClockFreq+0xa0>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ce:	fb03 f202 	mul.w	r2, r3, r2
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e004      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a0c      	ldr	r2, [pc, #48]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	613b      	str	r3, [r7, #16]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ee:	613b      	str	r3, [r7, #16]
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	693b      	ldr	r3, [r7, #16]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200
 8002508:	08005ef0 	.word	0x08005ef0
 800250c:	08005f00 	.word	0x08005f00
 8002510:	003d0900 	.word	0x003d0900

08002514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b02      	ldr	r3, [pc, #8]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x10>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff2 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	08005ee8 	.word	0x08005ee8

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffde 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08005ee8 	.word	0x08005ee8

08002578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <RCC_Delay+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <RCC_Delay+0x38>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <RCC_Delay+0x1c>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000008 	.word	0x20000008
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e076      	b.n	80026b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025d6:	d009      	beq.n	80025ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	e005      	b.n	80025ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe feac 	bl	8001364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	0c1a      	lsrs	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f002 0204 	and.w	r2, r2, #4
 8002692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	@ 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ce:	f7ff f867 	bl	80017a0 <HAL_GetTick>
 80026d2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026da:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d00c      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x4a>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026f2:	d106      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x46>
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d001      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	e17f      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_SPI_TransmitReceive+0x5c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_SPI_TransmitReceive+0x5c>
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e174      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_SPI_TransmitReceive+0x6e>
 8002726:	2302      	movs	r3, #2
 8002728:	e16d      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2205      	movs	r2, #5
 8002742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002786:	2b40      	cmp	r3, #64	@ 0x40
 8002788:	d007      	beq.n	800279a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027a2:	d17e      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0xf6>
 80027ac:	8afb      	ldrh	r3, [r7, #22]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d16c      	bne.n	800288c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	1c9a      	adds	r2, r3, #2
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d6:	e059      	b.n	800288c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d11b      	bne.n	800281e <HAL_SPI_TransmitReceive+0x162>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d016      	beq.n	800281e <HAL_SPI_TransmitReceive+0x162>
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d113      	bne.n	800281e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	1c9a      	adds	r2, r3, #2
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d119      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x1a4>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d014      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	b292      	uxth	r2, r2
 8002842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	1c9a      	adds	r2, r3, #2
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800285c:	2301      	movs	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002860:	f7fe ff9e 	bl	80017a0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286c:	429a      	cmp	r2, r3
 800286e:	d80d      	bhi.n	800288c <HAL_SPI_TransmitReceive+0x1d0>
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d009      	beq.n	800288c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0bc      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1a0      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x11c>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d19b      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x11c>
 80028a0:	e082      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x1f4>
 80028aa:	8afb      	ldrh	r3, [r7, #22]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d171      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d6:	e05d      	b.n	8002994 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d11c      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x264>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x264>
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d114      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d119      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x2a6>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d014      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002962:	f7fe ff1d 	bl	80017a0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296e:	429a      	cmp	r2, r3
 8002970:	d803      	bhi.n	800297a <HAL_SPI_TransmitReceive+0x2be>
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d102      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x2c4>
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e038      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d19c      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x21c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d197      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f8b7 	bl	8002b20 <SPI_EndRxTxTransaction>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01d      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3728      	adds	r7, #40	@ 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a20:	f7fe febe 	bl	80017a0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a30:	f7fe feb6 	bl	80017a0 <HAL_GetTick>
 8002a34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a36:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	0d1b      	lsrs	r3, r3, #20
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a46:	e054      	b.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d050      	beq.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a50:	f7fe fea6 	bl	80017a0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d902      	bls.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d13d      	bne.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a7e:	d111      	bne.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a88:	d004      	beq.n	8002a94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a92:	d107      	bne.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aac:	d10f      	bne.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e017      	b.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d19b      	bne.n	8002a48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000008 	.word	0x20000008

08002b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2201      	movs	r2, #1
 8002b34:	2102      	movs	r1, #2
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff ff6a 	bl	8002a10 <SPI_WaitFlagStateUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e013      	b.n	8002b7a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff ff57 	bl	8002a10 <SPI_WaitFlagStateUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e000      	b.n	8002b7a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e041      	b.n	8002c18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fc25 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f000 f93f 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d001      	beq.n	8002c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e032      	b.n	8002c9e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_TIM_Base_Start+0x88>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00e      	beq.n	8002c68 <HAL_TIM_Base_Start+0x48>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c52:	d009      	beq.n	8002c68 <HAL_TIM_Base_Start+0x48>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <HAL_TIM_Base_Start+0x8c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIM_Base_Start+0x48>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_TIM_Base_Start+0x90>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d111      	bne.n	8002c8c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d010      	beq.n	8002c9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	e007      	b.n	8002c9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0b4      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x186>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d08:	d03e      	beq.n	8002d88 <HAL_TIM_ConfigClockSource+0xd4>
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d0e:	f200 8087 	bhi.w	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d16:	f000 8086 	beq.w	8002e26 <HAL_TIM_ConfigClockSource+0x172>
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d1e:	d87f      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b70      	cmp	r3, #112	@ 0x70
 8002d22:	d01a      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0xa6>
 8002d24:	2b70      	cmp	r3, #112	@ 0x70
 8002d26:	d87b      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b60      	cmp	r3, #96	@ 0x60
 8002d2a:	d050      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x11a>
 8002d2c:	2b60      	cmp	r3, #96	@ 0x60
 8002d2e:	d877      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b50      	cmp	r3, #80	@ 0x50
 8002d32:	d03c      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0xfa>
 8002d34:	2b50      	cmp	r3, #80	@ 0x50
 8002d36:	d873      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d058      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x13a>
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d86f      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b30      	cmp	r3, #48	@ 0x30
 8002d42:	d064      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	2b30      	cmp	r3, #48	@ 0x30
 8002d46:	d86b      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d060      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d867      	bhi.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05c      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x15a>
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d05a      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x15a>
 8002d58:	e062      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d6a:	f000 f950 	bl	800300e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	609a      	str	r2, [r3, #8]
      break;
 8002d86:	e04f      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d98:	f000 f939 	bl	800300e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002daa:	609a      	str	r2, [r3, #8]
      break;
 8002dac:	e03c      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f000 f8b0 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2150      	movs	r1, #80	@ 0x50
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f907 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002dcc:	e02c      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f000 f8ce 	bl	8002f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2160      	movs	r1, #96	@ 0x60
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f8f7 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002dec:	e01c      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 f890 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2140      	movs	r1, #64	@ 0x40
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f8e7 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e00c      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f000 f8de 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002e1e:	e003      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e000      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a2f      	ldr	r2, [pc, #188]	@ (8002f14 <TIM_Base_SetConfig+0xd0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x30>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x30>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <TIM_Base_SetConfig+0xd4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x30>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <TIM_Base_SetConfig+0xd8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a22      	ldr	r2, [pc, #136]	@ (8002f14 <TIM_Base_SetConfig+0xd0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x62>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	@ (8002f18 <TIM_Base_SetConfig+0xd4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f1c <TIM_Base_SetConfig+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <TIM_Base_SetConfig+0xd0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800

08002f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0201 	bic.w	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 030a 	bic.w	r3, r3, #10
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0210 	bic.w	r2, r3, #16
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	031b      	lsls	r3, r3, #12
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f043 0307 	orr.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	609a      	str	r2, [r3, #8]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003060:	2302      	movs	r3, #2
 8003062:	e046      	b.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a16      	ldr	r2, [pc, #88]	@ (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b0:	d009      	beq.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a10      	ldr	r2, [pc, #64]	@ (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800

08003108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e042      	b.n	80031a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe f97e 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	@ 0x24
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800314a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f971 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	@ 0x28
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d175      	bne.n	80032b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Transmit+0x2c>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e06e      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2221      	movs	r2, #33	@ 0x21
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e6:	f7fe fadb 	bl	80017a0 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003200:	d108      	bne.n	8003214 <HAL_UART_Transmit+0x6c>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e003      	b.n	800321c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800321c:	e02e      	b.n	800327c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	@ 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f848 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e03a      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3302      	adds	r3, #2
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	e007      	b.n	800326e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3301      	adds	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1cb      	bne.n	800321e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	2140      	movs	r1, #64	@ 0x40
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f814 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e006      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ce:	e03b      	b.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d037      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7fe fa62 	bl	80017a0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <UART_WaitOnFlagUntilTimeout+0x30>
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03a      	b.n	8003368 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d023      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	d020      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b40      	cmp	r3, #64	@ 0x40
 800330a:	d01d      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d116      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f81d 	bl	8003370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2208      	movs	r2, #8
 800333a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e00f      	b.n	8003368 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	429a      	cmp	r2, r3
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	429a      	cmp	r2, r3
 8003364:	d0b4      	beq.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b095      	sub	sp, #84	@ 0x54
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003398:	643a      	str	r2, [r7, #64]	@ 0x40
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800339e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d119      	bne.n	800341c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f023 0310 	bic.w	r3, r3, #16
 80033fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003408:	61ba      	str	r2, [r7, #24]
 800340a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	613b      	str	r3, [r7, #16]
   return(result);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800342a:	bf00      	nop
 800342c:	3754      	adds	r7, #84	@ 0x54
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800346e:	f023 030c 	bic.w	r3, r3, #12
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	430b      	orrs	r3, r1
 800347a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2c      	ldr	r2, [pc, #176]	@ (8003548 <UART_SetConfig+0x114>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d103      	bne.n	80034a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7ff f858 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	e002      	b.n	80034aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7ff f840 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 80034a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <UART_SetConfig+0x118>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	0119      	lsls	r1, r3, #4
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e0:	4b1a      	ldr	r3, [pc, #104]	@ (800354c <UART_SetConfig+0x118>)
 80034e2:	fba3 0302 	umull	r0, r3, r3, r2
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2064      	movs	r0, #100	@ 0x64
 80034ea:	fb00 f303 	mul.w	r3, r0, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	3332      	adds	r3, #50	@ 0x32
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <UART_SetConfig+0x118>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003500:	4419      	add	r1, r3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fbb2 f2f3 	udiv	r2, r2, r3
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <UART_SetConfig+0x118>)
 800351a:	fba3 0302 	umull	r0, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2064      	movs	r0, #100	@ 0x64
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	3332      	adds	r3, #50	@ 0x32
 800352c:	4a07      	ldr	r2, [pc, #28]	@ (800354c <UART_SetConfig+0x118>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	440a      	add	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40013800 	.word	0x40013800
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <__cvt>:
 8003550:	2b00      	cmp	r3, #0
 8003552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003556:	461d      	mov	r5, r3
 8003558:	bfbb      	ittet	lt
 800355a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800355e:	461d      	movlt	r5, r3
 8003560:	2300      	movge	r3, #0
 8003562:	232d      	movlt	r3, #45	@ 0x2d
 8003564:	b088      	sub	sp, #32
 8003566:	4614      	mov	r4, r2
 8003568:	bfb8      	it	lt
 800356a:	4614      	movlt	r4, r2
 800356c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800356e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003570:	7013      	strb	r3, [r2, #0]
 8003572:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003574:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003578:	f023 0820 	bic.w	r8, r3, #32
 800357c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003580:	d005      	beq.n	800358e <__cvt+0x3e>
 8003582:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003586:	d100      	bne.n	800358a <__cvt+0x3a>
 8003588:	3601      	adds	r6, #1
 800358a:	2302      	movs	r3, #2
 800358c:	e000      	b.n	8003590 <__cvt+0x40>
 800358e:	2303      	movs	r3, #3
 8003590:	aa07      	add	r2, sp, #28
 8003592:	9204      	str	r2, [sp, #16]
 8003594:	aa06      	add	r2, sp, #24
 8003596:	e9cd a202 	strd	sl, r2, [sp, #8]
 800359a:	e9cd 3600 	strd	r3, r6, [sp]
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	f000 fe4d 	bl	8004240 <_dtoa_r>
 80035a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80035aa:	4607      	mov	r7, r0
 80035ac:	d119      	bne.n	80035e2 <__cvt+0x92>
 80035ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80035b0:	07db      	lsls	r3, r3, #31
 80035b2:	d50e      	bpl.n	80035d2 <__cvt+0x82>
 80035b4:	eb00 0906 	add.w	r9, r0, r6
 80035b8:	2200      	movs	r2, #0
 80035ba:	2300      	movs	r3, #0
 80035bc:	4620      	mov	r0, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	f7fd f9f2 	bl	80009a8 <__aeabi_dcmpeq>
 80035c4:	b108      	cbz	r0, 80035ca <__cvt+0x7a>
 80035c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80035ca:	2230      	movs	r2, #48	@ 0x30
 80035cc:	9b07      	ldr	r3, [sp, #28]
 80035ce:	454b      	cmp	r3, r9
 80035d0:	d31e      	bcc.n	8003610 <__cvt+0xc0>
 80035d2:	4638      	mov	r0, r7
 80035d4:	9b07      	ldr	r3, [sp, #28]
 80035d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80035d8:	1bdb      	subs	r3, r3, r7
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	b008      	add	sp, #32
 80035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035e6:	eb00 0906 	add.w	r9, r0, r6
 80035ea:	d1e5      	bne.n	80035b8 <__cvt+0x68>
 80035ec:	7803      	ldrb	r3, [r0, #0]
 80035ee:	2b30      	cmp	r3, #48	@ 0x30
 80035f0:	d10a      	bne.n	8003608 <__cvt+0xb8>
 80035f2:	2200      	movs	r2, #0
 80035f4:	2300      	movs	r3, #0
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fd f9d5 	bl	80009a8 <__aeabi_dcmpeq>
 80035fe:	b918      	cbnz	r0, 8003608 <__cvt+0xb8>
 8003600:	f1c6 0601 	rsb	r6, r6, #1
 8003604:	f8ca 6000 	str.w	r6, [sl]
 8003608:	f8da 3000 	ldr.w	r3, [sl]
 800360c:	4499      	add	r9, r3
 800360e:	e7d3      	b.n	80035b8 <__cvt+0x68>
 8003610:	1c59      	adds	r1, r3, #1
 8003612:	9107      	str	r1, [sp, #28]
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e7d9      	b.n	80035cc <__cvt+0x7c>

08003618 <__exponent>:
 8003618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800361a:	2900      	cmp	r1, #0
 800361c:	bfb6      	itet	lt
 800361e:	232d      	movlt	r3, #45	@ 0x2d
 8003620:	232b      	movge	r3, #43	@ 0x2b
 8003622:	4249      	neglt	r1, r1
 8003624:	2909      	cmp	r1, #9
 8003626:	7002      	strb	r2, [r0, #0]
 8003628:	7043      	strb	r3, [r0, #1]
 800362a:	dd29      	ble.n	8003680 <__exponent+0x68>
 800362c:	f10d 0307 	add.w	r3, sp, #7
 8003630:	461d      	mov	r5, r3
 8003632:	270a      	movs	r7, #10
 8003634:	fbb1 f6f7 	udiv	r6, r1, r7
 8003638:	461a      	mov	r2, r3
 800363a:	fb07 1416 	mls	r4, r7, r6, r1
 800363e:	3430      	adds	r4, #48	@ 0x30
 8003640:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003644:	460c      	mov	r4, r1
 8003646:	2c63      	cmp	r4, #99	@ 0x63
 8003648:	4631      	mov	r1, r6
 800364a:	f103 33ff 	add.w	r3, r3, #4294967295
 800364e:	dcf1      	bgt.n	8003634 <__exponent+0x1c>
 8003650:	3130      	adds	r1, #48	@ 0x30
 8003652:	1e94      	subs	r4, r2, #2
 8003654:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003658:	4623      	mov	r3, r4
 800365a:	1c41      	adds	r1, r0, #1
 800365c:	42ab      	cmp	r3, r5
 800365e:	d30a      	bcc.n	8003676 <__exponent+0x5e>
 8003660:	f10d 0309 	add.w	r3, sp, #9
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	42ac      	cmp	r4, r5
 8003668:	bf88      	it	hi
 800366a:	2300      	movhi	r3, #0
 800366c:	3302      	adds	r3, #2
 800366e:	4403      	add	r3, r0
 8003670:	1a18      	subs	r0, r3, r0
 8003672:	b003      	add	sp, #12
 8003674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003676:	f813 6b01 	ldrb.w	r6, [r3], #1
 800367a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800367e:	e7ed      	b.n	800365c <__exponent+0x44>
 8003680:	2330      	movs	r3, #48	@ 0x30
 8003682:	3130      	adds	r1, #48	@ 0x30
 8003684:	7083      	strb	r3, [r0, #2]
 8003686:	70c1      	strb	r1, [r0, #3]
 8003688:	1d03      	adds	r3, r0, #4
 800368a:	e7f1      	b.n	8003670 <__exponent+0x58>

0800368c <_printf_float>:
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003690:	b091      	sub	sp, #68	@ 0x44
 8003692:	460c      	mov	r4, r1
 8003694:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003698:	4616      	mov	r6, r2
 800369a:	461f      	mov	r7, r3
 800369c:	4605      	mov	r5, r0
 800369e:	f000 fcbf 	bl	8004020 <_localeconv_r>
 80036a2:	6803      	ldr	r3, [r0, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	9308      	str	r3, [sp, #32]
 80036a8:	f7fc fd52 	bl	8000150 <strlen>
 80036ac:	2300      	movs	r3, #0
 80036ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80036b0:	f8d8 3000 	ldr.w	r3, [r8]
 80036b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80036b6:	3307      	adds	r3, #7
 80036b8:	f023 0307 	bic.w	r3, r3, #7
 80036bc:	f103 0208 	add.w	r2, r3, #8
 80036c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80036c4:	f8d4 b000 	ldr.w	fp, [r4]
 80036c8:	f8c8 2000 	str.w	r2, [r8]
 80036cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80036d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80036d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80036e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80036e6:	4b9c      	ldr	r3, [pc, #624]	@ (8003958 <_printf_float+0x2cc>)
 80036e8:	f7fd f990 	bl	8000a0c <__aeabi_dcmpun>
 80036ec:	bb70      	cbnz	r0, 800374c <_printf_float+0xc0>
 80036ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80036f2:	f04f 32ff 	mov.w	r2, #4294967295
 80036f6:	4b98      	ldr	r3, [pc, #608]	@ (8003958 <_printf_float+0x2cc>)
 80036f8:	f7fd f96a 	bl	80009d0 <__aeabi_dcmple>
 80036fc:	bb30      	cbnz	r0, 800374c <_printf_float+0xc0>
 80036fe:	2200      	movs	r2, #0
 8003700:	2300      	movs	r3, #0
 8003702:	4640      	mov	r0, r8
 8003704:	4649      	mov	r1, r9
 8003706:	f7fd f959 	bl	80009bc <__aeabi_dcmplt>
 800370a:	b110      	cbz	r0, 8003712 <_printf_float+0x86>
 800370c:	232d      	movs	r3, #45	@ 0x2d
 800370e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003712:	4a92      	ldr	r2, [pc, #584]	@ (800395c <_printf_float+0x2d0>)
 8003714:	4b92      	ldr	r3, [pc, #584]	@ (8003960 <_printf_float+0x2d4>)
 8003716:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800371a:	bf8c      	ite	hi
 800371c:	4690      	movhi	r8, r2
 800371e:	4698      	movls	r8, r3
 8003720:	2303      	movs	r3, #3
 8003722:	f04f 0900 	mov.w	r9, #0
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	f02b 0304 	bic.w	r3, fp, #4
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	4633      	mov	r3, r6
 8003730:	4621      	mov	r1, r4
 8003732:	4628      	mov	r0, r5
 8003734:	9700      	str	r7, [sp, #0]
 8003736:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003738:	f000 f9d4 	bl	8003ae4 <_printf_common>
 800373c:	3001      	adds	r0, #1
 800373e:	f040 8090 	bne.w	8003862 <_printf_float+0x1d6>
 8003742:	f04f 30ff 	mov.w	r0, #4294967295
 8003746:	b011      	add	sp, #68	@ 0x44
 8003748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	4640      	mov	r0, r8
 8003752:	4649      	mov	r1, r9
 8003754:	f7fd f95a 	bl	8000a0c <__aeabi_dcmpun>
 8003758:	b148      	cbz	r0, 800376e <_printf_float+0xe2>
 800375a:	464b      	mov	r3, r9
 800375c:	2b00      	cmp	r3, #0
 800375e:	bfb8      	it	lt
 8003760:	232d      	movlt	r3, #45	@ 0x2d
 8003762:	4a80      	ldr	r2, [pc, #512]	@ (8003964 <_printf_float+0x2d8>)
 8003764:	bfb8      	it	lt
 8003766:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800376a:	4b7f      	ldr	r3, [pc, #508]	@ (8003968 <_printf_float+0x2dc>)
 800376c:	e7d3      	b.n	8003716 <_printf_float+0x8a>
 800376e:	6863      	ldr	r3, [r4, #4]
 8003770:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	d13f      	bne.n	80037f8 <_printf_float+0x16c>
 8003778:	2306      	movs	r3, #6
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003782:	6023      	str	r3, [r4, #0]
 8003784:	9206      	str	r2, [sp, #24]
 8003786:	aa0e      	add	r2, sp, #56	@ 0x38
 8003788:	e9cd a204 	strd	sl, r2, [sp, #16]
 800378c:	aa0d      	add	r2, sp, #52	@ 0x34
 800378e:	9203      	str	r2, [sp, #12]
 8003790:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003794:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	4642      	mov	r2, r8
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4628      	mov	r0, r5
 80037a0:	464b      	mov	r3, r9
 80037a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80037a4:	f7ff fed4 	bl	8003550 <__cvt>
 80037a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80037aa:	4680      	mov	r8, r0
 80037ac:	2947      	cmp	r1, #71	@ 0x47
 80037ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80037b0:	d128      	bne.n	8003804 <_printf_float+0x178>
 80037b2:	1cc8      	adds	r0, r1, #3
 80037b4:	db02      	blt.n	80037bc <_printf_float+0x130>
 80037b6:	6863      	ldr	r3, [r4, #4]
 80037b8:	4299      	cmp	r1, r3
 80037ba:	dd40      	ble.n	800383e <_printf_float+0x1b2>
 80037bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80037c0:	fa5f fa8a 	uxtb.w	sl, sl
 80037c4:	4652      	mov	r2, sl
 80037c6:	3901      	subs	r1, #1
 80037c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80037cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80037ce:	f7ff ff23 	bl	8003618 <__exponent>
 80037d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80037d4:	4681      	mov	r9, r0
 80037d6:	1813      	adds	r3, r2, r0
 80037d8:	2a01      	cmp	r2, #1
 80037da:	6123      	str	r3, [r4, #16]
 80037dc:	dc02      	bgt.n	80037e4 <_printf_float+0x158>
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	07d2      	lsls	r2, r2, #31
 80037e2:	d501      	bpl.n	80037e8 <_printf_float+0x15c>
 80037e4:	3301      	adds	r3, #1
 80037e6:	6123      	str	r3, [r4, #16]
 80037e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d09e      	beq.n	800372e <_printf_float+0xa2>
 80037f0:	232d      	movs	r3, #45	@ 0x2d
 80037f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037f6:	e79a      	b.n	800372e <_printf_float+0xa2>
 80037f8:	2947      	cmp	r1, #71	@ 0x47
 80037fa:	d1bf      	bne.n	800377c <_printf_float+0xf0>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1bd      	bne.n	800377c <_printf_float+0xf0>
 8003800:	2301      	movs	r3, #1
 8003802:	e7ba      	b.n	800377a <_printf_float+0xee>
 8003804:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003808:	d9dc      	bls.n	80037c4 <_printf_float+0x138>
 800380a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800380e:	d118      	bne.n	8003842 <_printf_float+0x1b6>
 8003810:	2900      	cmp	r1, #0
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	dd0b      	ble.n	800382e <_printf_float+0x1a2>
 8003816:	6121      	str	r1, [r4, #16]
 8003818:	b913      	cbnz	r3, 8003820 <_printf_float+0x194>
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	07d0      	lsls	r0, r2, #31
 800381e:	d502      	bpl.n	8003826 <_printf_float+0x19a>
 8003820:	3301      	adds	r3, #1
 8003822:	440b      	add	r3, r1
 8003824:	6123      	str	r3, [r4, #16]
 8003826:	f04f 0900 	mov.w	r9, #0
 800382a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800382c:	e7dc      	b.n	80037e8 <_printf_float+0x15c>
 800382e:	b913      	cbnz	r3, 8003836 <_printf_float+0x1aa>
 8003830:	6822      	ldr	r2, [r4, #0]
 8003832:	07d2      	lsls	r2, r2, #31
 8003834:	d501      	bpl.n	800383a <_printf_float+0x1ae>
 8003836:	3302      	adds	r3, #2
 8003838:	e7f4      	b.n	8003824 <_printf_float+0x198>
 800383a:	2301      	movs	r3, #1
 800383c:	e7f2      	b.n	8003824 <_printf_float+0x198>
 800383e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003844:	4299      	cmp	r1, r3
 8003846:	db05      	blt.n	8003854 <_printf_float+0x1c8>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	6121      	str	r1, [r4, #16]
 800384c:	07d8      	lsls	r0, r3, #31
 800384e:	d5ea      	bpl.n	8003826 <_printf_float+0x19a>
 8003850:	1c4b      	adds	r3, r1, #1
 8003852:	e7e7      	b.n	8003824 <_printf_float+0x198>
 8003854:	2900      	cmp	r1, #0
 8003856:	bfcc      	ite	gt
 8003858:	2201      	movgt	r2, #1
 800385a:	f1c1 0202 	rsble	r2, r1, #2
 800385e:	4413      	add	r3, r2
 8003860:	e7e0      	b.n	8003824 <_printf_float+0x198>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	055a      	lsls	r2, r3, #21
 8003866:	d407      	bmi.n	8003878 <_printf_float+0x1ec>
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	4642      	mov	r2, r8
 800386c:	4631      	mov	r1, r6
 800386e:	4628      	mov	r0, r5
 8003870:	47b8      	blx	r7
 8003872:	3001      	adds	r0, #1
 8003874:	d12b      	bne.n	80038ce <_printf_float+0x242>
 8003876:	e764      	b.n	8003742 <_printf_float+0xb6>
 8003878:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800387c:	f240 80dc 	bls.w	8003a38 <_printf_float+0x3ac>
 8003880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	f7fd f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800388c:	2800      	cmp	r0, #0
 800388e:	d033      	beq.n	80038f8 <_printf_float+0x26c>
 8003890:	2301      	movs	r3, #1
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	4a35      	ldr	r2, [pc, #212]	@ (800396c <_printf_float+0x2e0>)
 8003898:	47b8      	blx	r7
 800389a:	3001      	adds	r0, #1
 800389c:	f43f af51 	beq.w	8003742 <_printf_float+0xb6>
 80038a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80038a4:	4543      	cmp	r3, r8
 80038a6:	db02      	blt.n	80038ae <_printf_float+0x222>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	07d8      	lsls	r0, r3, #31
 80038ac:	d50f      	bpl.n	80038ce <_printf_float+0x242>
 80038ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f af42 	beq.w	8003742 <_printf_float+0xb6>
 80038be:	f04f 0900 	mov.w	r9, #0
 80038c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80038c6:	f104 0a1a 	add.w	sl, r4, #26
 80038ca:	45c8      	cmp	r8, r9
 80038cc:	dc09      	bgt.n	80038e2 <_printf_float+0x256>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	079b      	lsls	r3, r3, #30
 80038d2:	f100 8102 	bmi.w	8003ada <_printf_float+0x44e>
 80038d6:	68e0      	ldr	r0, [r4, #12]
 80038d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80038da:	4298      	cmp	r0, r3
 80038dc:	bfb8      	it	lt
 80038de:	4618      	movlt	r0, r3
 80038e0:	e731      	b.n	8003746 <_printf_float+0xba>
 80038e2:	2301      	movs	r3, #1
 80038e4:	4652      	mov	r2, sl
 80038e6:	4631      	mov	r1, r6
 80038e8:	4628      	mov	r0, r5
 80038ea:	47b8      	blx	r7
 80038ec:	3001      	adds	r0, #1
 80038ee:	f43f af28 	beq.w	8003742 <_printf_float+0xb6>
 80038f2:	f109 0901 	add.w	r9, r9, #1
 80038f6:	e7e8      	b.n	80038ca <_printf_float+0x23e>
 80038f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	dc38      	bgt.n	8003970 <_printf_float+0x2e4>
 80038fe:	2301      	movs	r3, #1
 8003900:	4631      	mov	r1, r6
 8003902:	4628      	mov	r0, r5
 8003904:	4a19      	ldr	r2, [pc, #100]	@ (800396c <_printf_float+0x2e0>)
 8003906:	47b8      	blx	r7
 8003908:	3001      	adds	r0, #1
 800390a:	f43f af1a 	beq.w	8003742 <_printf_float+0xb6>
 800390e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003912:	ea59 0303 	orrs.w	r3, r9, r3
 8003916:	d102      	bne.n	800391e <_printf_float+0x292>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	07d9      	lsls	r1, r3, #31
 800391c:	d5d7      	bpl.n	80038ce <_printf_float+0x242>
 800391e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003922:	4631      	mov	r1, r6
 8003924:	4628      	mov	r0, r5
 8003926:	47b8      	blx	r7
 8003928:	3001      	adds	r0, #1
 800392a:	f43f af0a 	beq.w	8003742 <_printf_float+0xb6>
 800392e:	f04f 0a00 	mov.w	sl, #0
 8003932:	f104 0b1a 	add.w	fp, r4, #26
 8003936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003938:	425b      	negs	r3, r3
 800393a:	4553      	cmp	r3, sl
 800393c:	dc01      	bgt.n	8003942 <_printf_float+0x2b6>
 800393e:	464b      	mov	r3, r9
 8003940:	e793      	b.n	800386a <_printf_float+0x1de>
 8003942:	2301      	movs	r3, #1
 8003944:	465a      	mov	r2, fp
 8003946:	4631      	mov	r1, r6
 8003948:	4628      	mov	r0, r5
 800394a:	47b8      	blx	r7
 800394c:	3001      	adds	r0, #1
 800394e:	f43f aef8 	beq.w	8003742 <_printf_float+0xb6>
 8003952:	f10a 0a01 	add.w	sl, sl, #1
 8003956:	e7ee      	b.n	8003936 <_printf_float+0x2aa>
 8003958:	7fefffff 	.word	0x7fefffff
 800395c:	08005f06 	.word	0x08005f06
 8003960:	08005f02 	.word	0x08005f02
 8003964:	08005f0e 	.word	0x08005f0e
 8003968:	08005f0a 	.word	0x08005f0a
 800396c:	08005f12 	.word	0x08005f12
 8003970:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003972:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003976:	4553      	cmp	r3, sl
 8003978:	bfa8      	it	ge
 800397a:	4653      	movge	r3, sl
 800397c:	2b00      	cmp	r3, #0
 800397e:	4699      	mov	r9, r3
 8003980:	dc36      	bgt.n	80039f0 <_printf_float+0x364>
 8003982:	f04f 0b00 	mov.w	fp, #0
 8003986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800398a:	f104 021a 	add.w	r2, r4, #26
 800398e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003990:	930a      	str	r3, [sp, #40]	@ 0x28
 8003992:	eba3 0309 	sub.w	r3, r3, r9
 8003996:	455b      	cmp	r3, fp
 8003998:	dc31      	bgt.n	80039fe <_printf_float+0x372>
 800399a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800399c:	459a      	cmp	sl, r3
 800399e:	dc3a      	bgt.n	8003a16 <_printf_float+0x38a>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	07da      	lsls	r2, r3, #31
 80039a4:	d437      	bmi.n	8003a16 <_printf_float+0x38a>
 80039a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039a8:	ebaa 0903 	sub.w	r9, sl, r3
 80039ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039ae:	ebaa 0303 	sub.w	r3, sl, r3
 80039b2:	4599      	cmp	r9, r3
 80039b4:	bfa8      	it	ge
 80039b6:	4699      	movge	r9, r3
 80039b8:	f1b9 0f00 	cmp.w	r9, #0
 80039bc:	dc33      	bgt.n	8003a26 <_printf_float+0x39a>
 80039be:	f04f 0800 	mov.w	r8, #0
 80039c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039c6:	f104 0b1a 	add.w	fp, r4, #26
 80039ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039cc:	ebaa 0303 	sub.w	r3, sl, r3
 80039d0:	eba3 0309 	sub.w	r3, r3, r9
 80039d4:	4543      	cmp	r3, r8
 80039d6:	f77f af7a 	ble.w	80038ce <_printf_float+0x242>
 80039da:	2301      	movs	r3, #1
 80039dc:	465a      	mov	r2, fp
 80039de:	4631      	mov	r1, r6
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	f43f aeac 	beq.w	8003742 <_printf_float+0xb6>
 80039ea:	f108 0801 	add.w	r8, r8, #1
 80039ee:	e7ec      	b.n	80039ca <_printf_float+0x33e>
 80039f0:	4642      	mov	r2, r8
 80039f2:	4631      	mov	r1, r6
 80039f4:	4628      	mov	r0, r5
 80039f6:	47b8      	blx	r7
 80039f8:	3001      	adds	r0, #1
 80039fa:	d1c2      	bne.n	8003982 <_printf_float+0x2f6>
 80039fc:	e6a1      	b.n	8003742 <_printf_float+0xb6>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	920a      	str	r2, [sp, #40]	@ 0x28
 8003a06:	47b8      	blx	r7
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f43f ae9a 	beq.w	8003742 <_printf_float+0xb6>
 8003a0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a10:	f10b 0b01 	add.w	fp, fp, #1
 8003a14:	e7bb      	b.n	800398e <_printf_float+0x302>
 8003a16:	4631      	mov	r1, r6
 8003a18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	47b8      	blx	r7
 8003a20:	3001      	adds	r0, #1
 8003a22:	d1c0      	bne.n	80039a6 <_printf_float+0x31a>
 8003a24:	e68d      	b.n	8003742 <_printf_float+0xb6>
 8003a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a28:	464b      	mov	r3, r9
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	4442      	add	r2, r8
 8003a30:	47b8      	blx	r7
 8003a32:	3001      	adds	r0, #1
 8003a34:	d1c3      	bne.n	80039be <_printf_float+0x332>
 8003a36:	e684      	b.n	8003742 <_printf_float+0xb6>
 8003a38:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003a3c:	f1ba 0f01 	cmp.w	sl, #1
 8003a40:	dc01      	bgt.n	8003a46 <_printf_float+0x3ba>
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	d536      	bpl.n	8003ab4 <_printf_float+0x428>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4642      	mov	r2, r8
 8003a4a:	4631      	mov	r1, r6
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	47b8      	blx	r7
 8003a50:	3001      	adds	r0, #1
 8003a52:	f43f ae76 	beq.w	8003742 <_printf_float+0xb6>
 8003a56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b8      	blx	r7
 8003a60:	3001      	adds	r0, #1
 8003a62:	f43f ae6e 	beq.w	8003742 <_printf_float+0xb6>
 8003a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a72:	f7fc ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8003a76:	b9c0      	cbnz	r0, 8003aaa <_printf_float+0x41e>
 8003a78:	4653      	mov	r3, sl
 8003a7a:	f108 0201 	add.w	r2, r8, #1
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	47b8      	blx	r7
 8003a84:	3001      	adds	r0, #1
 8003a86:	d10c      	bne.n	8003aa2 <_printf_float+0x416>
 8003a88:	e65b      	b.n	8003742 <_printf_float+0xb6>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	465a      	mov	r2, fp
 8003a8e:	4631      	mov	r1, r6
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b8      	blx	r7
 8003a94:	3001      	adds	r0, #1
 8003a96:	f43f ae54 	beq.w	8003742 <_printf_float+0xb6>
 8003a9a:	f108 0801 	add.w	r8, r8, #1
 8003a9e:	45d0      	cmp	r8, sl
 8003aa0:	dbf3      	blt.n	8003a8a <_printf_float+0x3fe>
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003aa8:	e6e0      	b.n	800386c <_printf_float+0x1e0>
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	f104 0b1a 	add.w	fp, r4, #26
 8003ab2:	e7f4      	b.n	8003a9e <_printf_float+0x412>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4642      	mov	r2, r8
 8003ab8:	e7e1      	b.n	8003a7e <_printf_float+0x3f2>
 8003aba:	2301      	movs	r3, #1
 8003abc:	464a      	mov	r2, r9
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b8      	blx	r7
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f43f ae3c 	beq.w	8003742 <_printf_float+0xb6>
 8003aca:	f108 0801 	add.w	r8, r8, #1
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003ad2:	1a5b      	subs	r3, r3, r1
 8003ad4:	4543      	cmp	r3, r8
 8003ad6:	dcf0      	bgt.n	8003aba <_printf_float+0x42e>
 8003ad8:	e6fd      	b.n	80038d6 <_printf_float+0x24a>
 8003ada:	f04f 0800 	mov.w	r8, #0
 8003ade:	f104 0919 	add.w	r9, r4, #25
 8003ae2:	e7f4      	b.n	8003ace <_printf_float+0x442>

08003ae4 <_printf_common>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4616      	mov	r6, r2
 8003aea:	4698      	mov	r8, r3
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	4607      	mov	r7, r0
 8003af2:	4293      	cmp	r3, r2
 8003af4:	bfb8      	it	lt
 8003af6:	4613      	movlt	r3, r2
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003afe:	460c      	mov	r4, r1
 8003b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b04:	b10a      	cbz	r2, 8003b0a <_printf_common+0x26>
 8003b06:	3301      	adds	r3, #1
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	0699      	lsls	r1, r3, #26
 8003b0e:	bf42      	ittt	mi
 8003b10:	6833      	ldrmi	r3, [r6, #0]
 8003b12:	3302      	addmi	r3, #2
 8003b14:	6033      	strmi	r3, [r6, #0]
 8003b16:	6825      	ldr	r5, [r4, #0]
 8003b18:	f015 0506 	ands.w	r5, r5, #6
 8003b1c:	d106      	bne.n	8003b2c <_printf_common+0x48>
 8003b1e:	f104 0a19 	add.w	sl, r4, #25
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	6832      	ldr	r2, [r6, #0]
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	42ab      	cmp	r3, r5
 8003b2a:	dc2b      	bgt.n	8003b84 <_printf_common+0xa0>
 8003b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	3b00      	subs	r3, #0
 8003b34:	bf18      	it	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	0692      	lsls	r2, r2, #26
 8003b3a:	d430      	bmi.n	8003b9e <_printf_common+0xba>
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b44:	47c8      	blx	r9
 8003b46:	3001      	adds	r0, #1
 8003b48:	d023      	beq.n	8003b92 <_printf_common+0xae>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf14      	ite	ne
 8003b56:	2500      	movne	r5, #0
 8003b58:	6833      	ldreq	r3, [r6, #0]
 8003b5a:	f04f 0600 	mov.w	r6, #0
 8003b5e:	bf08      	it	eq
 8003b60:	68e5      	ldreq	r5, [r4, #12]
 8003b62:	f104 041a 	add.w	r4, r4, #26
 8003b66:	bf08      	it	eq
 8003b68:	1aed      	subeq	r5, r5, r3
 8003b6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b6e:	bf08      	it	eq
 8003b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bfc4      	itt	gt
 8003b78:	1a9b      	subgt	r3, r3, r2
 8003b7a:	18ed      	addgt	r5, r5, r3
 8003b7c:	42b5      	cmp	r5, r6
 8003b7e:	d11a      	bne.n	8003bb6 <_printf_common+0xd2>
 8003b80:	2000      	movs	r0, #0
 8003b82:	e008      	b.n	8003b96 <_printf_common+0xb2>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4652      	mov	r2, sl
 8003b88:	4641      	mov	r1, r8
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	47c8      	blx	r9
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d103      	bne.n	8003b9a <_printf_common+0xb6>
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9a:	3501      	adds	r5, #1
 8003b9c:	e7c1      	b.n	8003b22 <_printf_common+0x3e>
 8003b9e:	2030      	movs	r0, #48	@ 0x30
 8003ba0:	18e1      	adds	r1, r4, r3
 8003ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bac:	4422      	add	r2, r4
 8003bae:	3302      	adds	r3, #2
 8003bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bb4:	e7c2      	b.n	8003b3c <_printf_common+0x58>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4641      	mov	r1, r8
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	47c8      	blx	r9
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0e6      	beq.n	8003b92 <_printf_common+0xae>
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	e7d9      	b.n	8003b7c <_printf_common+0x98>

08003bc8 <_printf_i>:
 8003bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	7e0f      	ldrb	r7, [r1, #24]
 8003bce:	4691      	mov	r9, r2
 8003bd0:	2f78      	cmp	r7, #120	@ 0x78
 8003bd2:	4680      	mov	r8, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	469a      	mov	sl, r3
 8003bd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bde:	d807      	bhi.n	8003bf0 <_printf_i+0x28>
 8003be0:	2f62      	cmp	r7, #98	@ 0x62
 8003be2:	d80a      	bhi.n	8003bfa <_printf_i+0x32>
 8003be4:	2f00      	cmp	r7, #0
 8003be6:	f000 80d1 	beq.w	8003d8c <_printf_i+0x1c4>
 8003bea:	2f58      	cmp	r7, #88	@ 0x58
 8003bec:	f000 80b8 	beq.w	8003d60 <_printf_i+0x198>
 8003bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf8:	e03a      	b.n	8003c70 <_printf_i+0xa8>
 8003bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bfe:	2b15      	cmp	r3, #21
 8003c00:	d8f6      	bhi.n	8003bf0 <_printf_i+0x28>
 8003c02:	a101      	add	r1, pc, #4	@ (adr r1, 8003c08 <_printf_i+0x40>)
 8003c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c75 	.word	0x08003c75
 8003c10:	08003bf1 	.word	0x08003bf1
 8003c14:	08003bf1 	.word	0x08003bf1
 8003c18:	08003bf1 	.word	0x08003bf1
 8003c1c:	08003bf1 	.word	0x08003bf1
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003bf1 	.word	0x08003bf1
 8003c28:	08003bf1 	.word	0x08003bf1
 8003c2c:	08003bf1 	.word	0x08003bf1
 8003c30:	08003bf1 	.word	0x08003bf1
 8003c34:	08003d73 	.word	0x08003d73
 8003c38:	08003c9f 	.word	0x08003c9f
 8003c3c:	08003d2d 	.word	0x08003d2d
 8003c40:	08003bf1 	.word	0x08003bf1
 8003c44:	08003bf1 	.word	0x08003bf1
 8003c48:	08003d95 	.word	0x08003d95
 8003c4c:	08003bf1 	.word	0x08003bf1
 8003c50:	08003c9f 	.word	0x08003c9f
 8003c54:	08003bf1 	.word	0x08003bf1
 8003c58:	08003bf1 	.word	0x08003bf1
 8003c5c:	08003d35 	.word	0x08003d35
 8003c60:	6833      	ldr	r3, [r6, #0]
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6032      	str	r2, [r6, #0]
 8003c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c70:	2301      	movs	r3, #1
 8003c72:	e09c      	b.n	8003dae <_printf_i+0x1e6>
 8003c74:	6833      	ldr	r3, [r6, #0]
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	1d19      	adds	r1, r3, #4
 8003c7a:	6031      	str	r1, [r6, #0]
 8003c7c:	0606      	lsls	r6, r0, #24
 8003c7e:	d501      	bpl.n	8003c84 <_printf_i+0xbc>
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	e003      	b.n	8003c8c <_printf_i+0xc4>
 8003c84:	0645      	lsls	r5, r0, #25
 8003c86:	d5fb      	bpl.n	8003c80 <_printf_i+0xb8>
 8003c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	da03      	bge.n	8003c98 <_printf_i+0xd0>
 8003c90:	232d      	movs	r3, #45	@ 0x2d
 8003c92:	426d      	negs	r5, r5
 8003c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c98:	230a      	movs	r3, #10
 8003c9a:	4858      	ldr	r0, [pc, #352]	@ (8003dfc <_printf_i+0x234>)
 8003c9c:	e011      	b.n	8003cc2 <_printf_i+0xfa>
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	6833      	ldr	r3, [r6, #0]
 8003ca2:	0608      	lsls	r0, r1, #24
 8003ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca8:	d402      	bmi.n	8003cb0 <_printf_i+0xe8>
 8003caa:	0649      	lsls	r1, r1, #25
 8003cac:	bf48      	it	mi
 8003cae:	b2ad      	uxthmi	r5, r5
 8003cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	bf14      	ite	ne
 8003cb6:	230a      	movne	r3, #10
 8003cb8:	2308      	moveq	r3, #8
 8003cba:	4850      	ldr	r0, [pc, #320]	@ (8003dfc <_printf_i+0x234>)
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cc2:	6866      	ldr	r6, [r4, #4]
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	60a6      	str	r6, [r4, #8]
 8003cc8:	db05      	blt.n	8003cd6 <_printf_i+0x10e>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	432e      	orrs	r6, r5
 8003cce:	f021 0104 	bic.w	r1, r1, #4
 8003cd2:	6021      	str	r1, [r4, #0]
 8003cd4:	d04b      	beq.n	8003d6e <_printf_i+0x1a6>
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8003ce0:	5dc7      	ldrb	r7, [r0, r7]
 8003ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce6:	462f      	mov	r7, r5
 8003ce8:	42bb      	cmp	r3, r7
 8003cea:	460d      	mov	r5, r1
 8003cec:	d9f4      	bls.n	8003cd8 <_printf_i+0x110>
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10b      	bne.n	8003d0a <_printf_i+0x142>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	07df      	lsls	r7, r3, #31
 8003cf6:	d508      	bpl.n	8003d0a <_printf_i+0x142>
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	6861      	ldr	r1, [r4, #4]
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	bfde      	ittt	le
 8003d00:	2330      	movle	r3, #48	@ 0x30
 8003d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d0a:	1b92      	subs	r2, r2, r6
 8003d0c:	6122      	str	r2, [r4, #16]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f8cd a000 	str.w	sl, [sp]
 8003d18:	aa03      	add	r2, sp, #12
 8003d1a:	f7ff fee3 	bl	8003ae4 <_printf_common>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d14a      	bne.n	8003db8 <_printf_i+0x1f0>
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f043 0320 	orr.w	r3, r3, #32
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	2778      	movs	r7, #120	@ 0x78
 8003d36:	4832      	ldr	r0, [pc, #200]	@ (8003e00 <_printf_i+0x238>)
 8003d38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	6831      	ldr	r1, [r6, #0]
 8003d40:	061f      	lsls	r7, r3, #24
 8003d42:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d46:	d402      	bmi.n	8003d4e <_printf_i+0x186>
 8003d48:	065f      	lsls	r7, r3, #25
 8003d4a:	bf48      	it	mi
 8003d4c:	b2ad      	uxthmi	r5, r5
 8003d4e:	6031      	str	r1, [r6, #0]
 8003d50:	07d9      	lsls	r1, r3, #31
 8003d52:	bf44      	itt	mi
 8003d54:	f043 0320 	orrmi.w	r3, r3, #32
 8003d58:	6023      	strmi	r3, [r4, #0]
 8003d5a:	b11d      	cbz	r5, 8003d64 <_printf_i+0x19c>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	e7ad      	b.n	8003cbc <_printf_i+0xf4>
 8003d60:	4826      	ldr	r0, [pc, #152]	@ (8003dfc <_printf_i+0x234>)
 8003d62:	e7e9      	b.n	8003d38 <_printf_i+0x170>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	f023 0320 	bic.w	r3, r3, #32
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	e7f6      	b.n	8003d5c <_printf_i+0x194>
 8003d6e:	4616      	mov	r6, r2
 8003d70:	e7bd      	b.n	8003cee <_printf_i+0x126>
 8003d72:	6833      	ldr	r3, [r6, #0]
 8003d74:	6825      	ldr	r5, [r4, #0]
 8003d76:	1d18      	adds	r0, r3, #4
 8003d78:	6961      	ldr	r1, [r4, #20]
 8003d7a:	6030      	str	r0, [r6, #0]
 8003d7c:	062e      	lsls	r6, r5, #24
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	d501      	bpl.n	8003d86 <_printf_i+0x1be>
 8003d82:	6019      	str	r1, [r3, #0]
 8003d84:	e002      	b.n	8003d8c <_printf_i+0x1c4>
 8003d86:	0668      	lsls	r0, r5, #25
 8003d88:	d5fb      	bpl.n	8003d82 <_printf_i+0x1ba>
 8003d8a:	8019      	strh	r1, [r3, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4616      	mov	r6, r2
 8003d90:	6123      	str	r3, [r4, #16]
 8003d92:	e7bc      	b.n	8003d0e <_printf_i+0x146>
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	2100      	movs	r1, #0
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	6032      	str	r2, [r6, #0]
 8003d9c:	681e      	ldr	r6, [r3, #0]
 8003d9e:	6862      	ldr	r2, [r4, #4]
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 f9b4 	bl	800410e <memchr>
 8003da6:	b108      	cbz	r0, 8003dac <_printf_i+0x1e4>
 8003da8:	1b80      	subs	r0, r0, r6
 8003daa:	6060      	str	r0, [r4, #4]
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	6123      	str	r3, [r4, #16]
 8003db0:	2300      	movs	r3, #0
 8003db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db6:	e7aa      	b.n	8003d0e <_printf_i+0x146>
 8003db8:	4632      	mov	r2, r6
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	47d0      	blx	sl
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d0ad      	beq.n	8003d22 <_printf_i+0x15a>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	079b      	lsls	r3, r3, #30
 8003dca:	d413      	bmi.n	8003df4 <_printf_i+0x22c>
 8003dcc:	68e0      	ldr	r0, [r4, #12]
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	4298      	cmp	r0, r3
 8003dd2:	bfb8      	it	lt
 8003dd4:	4618      	movlt	r0, r3
 8003dd6:	e7a6      	b.n	8003d26 <_printf_i+0x15e>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4649      	mov	r1, r9
 8003dde:	4640      	mov	r0, r8
 8003de0:	47d0      	blx	sl
 8003de2:	3001      	adds	r0, #1
 8003de4:	d09d      	beq.n	8003d22 <_printf_i+0x15a>
 8003de6:	3501      	adds	r5, #1
 8003de8:	68e3      	ldr	r3, [r4, #12]
 8003dea:	9903      	ldr	r1, [sp, #12]
 8003dec:	1a5b      	subs	r3, r3, r1
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	dcf2      	bgt.n	8003dd8 <_printf_i+0x210>
 8003df2:	e7eb      	b.n	8003dcc <_printf_i+0x204>
 8003df4:	2500      	movs	r5, #0
 8003df6:	f104 0619 	add.w	r6, r4, #25
 8003dfa:	e7f5      	b.n	8003de8 <_printf_i+0x220>
 8003dfc:	08005f14 	.word	0x08005f14
 8003e00:	08005f25 	.word	0x08005f25

08003e04 <std>:
 8003e04:	2300      	movs	r3, #0
 8003e06:	b510      	push	{r4, lr}
 8003e08:	4604      	mov	r4, r0
 8003e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e12:	6083      	str	r3, [r0, #8]
 8003e14:	8181      	strh	r1, [r0, #12]
 8003e16:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e18:	81c2      	strh	r2, [r0, #14]
 8003e1a:	6183      	str	r3, [r0, #24]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	2208      	movs	r2, #8
 8003e20:	305c      	adds	r0, #92	@ 0x5c
 8003e22:	f000 f8f4 	bl	800400e <memset>
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <std+0x58>)
 8003e28:	6224      	str	r4, [r4, #32]
 8003e2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <std+0x5c>)
 8003e2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <std+0x60>)
 8003e32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <std+0x64>)
 8003e36:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <std+0x68>)
 8003e3a:	429c      	cmp	r4, r3
 8003e3c:	d006      	beq.n	8003e4c <std+0x48>
 8003e3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e42:	4294      	cmp	r4, r2
 8003e44:	d002      	beq.n	8003e4c <std+0x48>
 8003e46:	33d0      	adds	r3, #208	@ 0xd0
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	d105      	bne.n	8003e58 <std+0x54>
 8003e4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f000 b958 	b.w	8004108 <__retarget_lock_init_recursive>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08003f89 	.word	0x08003f89
 8003e60:	08003fab 	.word	0x08003fab
 8003e64:	08003fe3 	.word	0x08003fe3
 8003e68:	08004007 	.word	0x08004007
 8003e6c:	20000304 	.word	0x20000304

08003e70 <stdio_exit_handler>:
 8003e70:	4a02      	ldr	r2, [pc, #8]	@ (8003e7c <stdio_exit_handler+0xc>)
 8003e72:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <stdio_exit_handler+0x10>)
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <stdio_exit_handler+0x14>)
 8003e76:	f000 b869 	b.w	8003f4c <_fwalk_sglue>
 8003e7a:	bf00      	nop
 8003e7c:	20000014 	.word	0x20000014
 8003e80:	080057d9 	.word	0x080057d9
 8003e84:	20000024 	.word	0x20000024

08003e88 <cleanup_stdio>:
 8003e88:	6841      	ldr	r1, [r0, #4]
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <cleanup_stdio+0x34>)
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4299      	cmp	r1, r3
 8003e90:	4604      	mov	r4, r0
 8003e92:	d001      	beq.n	8003e98 <cleanup_stdio+0x10>
 8003e94:	f001 fca0 	bl	80057d8 <_fflush_r>
 8003e98:	68a1      	ldr	r1, [r4, #8]
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <cleanup_stdio+0x38>)
 8003e9c:	4299      	cmp	r1, r3
 8003e9e:	d002      	beq.n	8003ea6 <cleanup_stdio+0x1e>
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f001 fc99 	bl	80057d8 <_fflush_r>
 8003ea6:	68e1      	ldr	r1, [r4, #12]
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <cleanup_stdio+0x3c>)
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	d004      	beq.n	8003eb8 <cleanup_stdio+0x30>
 8003eae:	4620      	mov	r0, r4
 8003eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb4:	f001 bc90 	b.w	80057d8 <_fflush_r>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000304 	.word	0x20000304
 8003ec0:	2000036c 	.word	0x2000036c
 8003ec4:	200003d4 	.word	0x200003d4

08003ec8 <global_stdio_init.part.0>:
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <global_stdio_init.part.0+0x30>)
 8003ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8003efc <global_stdio_init.part.0+0x34>)
 8003ece:	4a0c      	ldr	r2, [pc, #48]	@ (8003f00 <global_stdio_init.part.0+0x38>)
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	2104      	movs	r1, #4
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f7ff ff94 	bl	8003e04 <std>
 8003edc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2109      	movs	r1, #9
 8003ee4:	f7ff ff8e 	bl	8003e04 <std>
 8003ee8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003eec:	2202      	movs	r2, #2
 8003eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef2:	2112      	movs	r1, #18
 8003ef4:	f7ff bf86 	b.w	8003e04 <std>
 8003ef8:	2000043c 	.word	0x2000043c
 8003efc:	20000304 	.word	0x20000304
 8003f00:	08003e71 	.word	0x08003e71

08003f04 <__sfp_lock_acquire>:
 8003f04:	4801      	ldr	r0, [pc, #4]	@ (8003f0c <__sfp_lock_acquire+0x8>)
 8003f06:	f000 b900 	b.w	800410a <__retarget_lock_acquire_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	20000445 	.word	0x20000445

08003f10 <__sfp_lock_release>:
 8003f10:	4801      	ldr	r0, [pc, #4]	@ (8003f18 <__sfp_lock_release+0x8>)
 8003f12:	f000 b8fb 	b.w	800410c <__retarget_lock_release_recursive>
 8003f16:	bf00      	nop
 8003f18:	20000445 	.word	0x20000445

08003f1c <__sinit>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	4604      	mov	r4, r0
 8003f20:	f7ff fff0 	bl	8003f04 <__sfp_lock_acquire>
 8003f24:	6a23      	ldr	r3, [r4, #32]
 8003f26:	b11b      	cbz	r3, 8003f30 <__sinit+0x14>
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2c:	f7ff bff0 	b.w	8003f10 <__sfp_lock_release>
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <__sinit+0x28>)
 8003f32:	6223      	str	r3, [r4, #32]
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <__sinit+0x2c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f5      	bne.n	8003f28 <__sinit+0xc>
 8003f3c:	f7ff ffc4 	bl	8003ec8 <global_stdio_init.part.0>
 8003f40:	e7f2      	b.n	8003f28 <__sinit+0xc>
 8003f42:	bf00      	nop
 8003f44:	08003e89 	.word	0x08003e89
 8003f48:	2000043c 	.word	0x2000043c

08003f4c <_fwalk_sglue>:
 8003f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f50:	4607      	mov	r7, r0
 8003f52:	4688      	mov	r8, r1
 8003f54:	4614      	mov	r4, r2
 8003f56:	2600      	movs	r6, #0
 8003f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f60:	d505      	bpl.n	8003f6e <_fwalk_sglue+0x22>
 8003f62:	6824      	ldr	r4, [r4, #0]
 8003f64:	2c00      	cmp	r4, #0
 8003f66:	d1f7      	bne.n	8003f58 <_fwalk_sglue+0xc>
 8003f68:	4630      	mov	r0, r6
 8003f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d907      	bls.n	8003f84 <_fwalk_sglue+0x38>
 8003f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	d003      	beq.n	8003f84 <_fwalk_sglue+0x38>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4638      	mov	r0, r7
 8003f80:	47c0      	blx	r8
 8003f82:	4306      	orrs	r6, r0
 8003f84:	3568      	adds	r5, #104	@ 0x68
 8003f86:	e7e9      	b.n	8003f5c <_fwalk_sglue+0x10>

08003f88 <__sread>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f90:	f000 f86c 	bl	800406c <_read_r>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	bfab      	itete	ge
 8003f98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f9c:	181b      	addge	r3, r3, r0
 8003f9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fa2:	bfac      	ite	ge
 8003fa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fa6:	81a3      	strhlt	r3, [r4, #12]
 8003fa8:	bd10      	pop	{r4, pc}

08003faa <__swrite>:
 8003faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fae:	461f      	mov	r7, r3
 8003fb0:	898b      	ldrh	r3, [r1, #12]
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	05db      	lsls	r3, r3, #23
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	4616      	mov	r6, r2
 8003fba:	d505      	bpl.n	8003fc8 <__swrite+0x1e>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc4:	f000 f840 	bl	8004048 <_lseek_r>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	4632      	mov	r2, r6
 8003fcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fde:	f000 b857 	b.w	8004090 <_write_r>

08003fe2 <__sseek>:
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fea:	f000 f82d 	bl	8004048 <_lseek_r>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	bf15      	itete	ne
 8003ff4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ff6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ffa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ffe:	81a3      	strheq	r3, [r4, #12]
 8004000:	bf18      	it	ne
 8004002:	81a3      	strhne	r3, [r4, #12]
 8004004:	bd10      	pop	{r4, pc}

08004006 <__sclose>:
 8004006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400a:	f000 b80d 	b.w	8004028 <_close_r>

0800400e <memset>:
 800400e:	4603      	mov	r3, r0
 8004010:	4402      	add	r2, r0
 8004012:	4293      	cmp	r3, r2
 8004014:	d100      	bne.n	8004018 <memset+0xa>
 8004016:	4770      	bx	lr
 8004018:	f803 1b01 	strb.w	r1, [r3], #1
 800401c:	e7f9      	b.n	8004012 <memset+0x4>
	...

08004020 <_localeconv_r>:
 8004020:	4800      	ldr	r0, [pc, #0]	@ (8004024 <_localeconv_r+0x4>)
 8004022:	4770      	bx	lr
 8004024:	20000160 	.word	0x20000160

08004028 <_close_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	2300      	movs	r3, #0
 800402c:	4d05      	ldr	r5, [pc, #20]	@ (8004044 <_close_r+0x1c>)
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	f7fd fac9 	bl	80015ca <_close>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_close_r+0x1a>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_close_r+0x1a>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	20000440 	.word	0x20000440

08004048 <_lseek_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	2200      	movs	r2, #0
 8004052:	4d05      	ldr	r5, [pc, #20]	@ (8004068 <_lseek_r+0x20>)
 8004054:	602a      	str	r2, [r5, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	f7fd fadb 	bl	8001612 <_lseek>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d102      	bne.n	8004066 <_lseek_r+0x1e>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	b103      	cbz	r3, 8004066 <_lseek_r+0x1e>
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	bd38      	pop	{r3, r4, r5, pc}
 8004068:	20000440 	.word	0x20000440

0800406c <_read_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	2200      	movs	r2, #0
 8004076:	4d05      	ldr	r5, [pc, #20]	@ (800408c <_read_r+0x20>)
 8004078:	602a      	str	r2, [r5, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	f7fd fa6c 	bl	8001558 <_read>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_read_r+0x1e>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_read_r+0x1e>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	20000440 	.word	0x20000440

08004090 <_write_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	2200      	movs	r2, #0
 800409a:	4d05      	ldr	r5, [pc, #20]	@ (80040b0 <_write_r+0x20>)
 800409c:	602a      	str	r2, [r5, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	f7fd fa77 	bl	8001592 <_write>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_write_r+0x1e>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_write_r+0x1e>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	20000440 	.word	0x20000440

080040b4 <__errno>:
 80040b4:	4b01      	ldr	r3, [pc, #4]	@ (80040bc <__errno+0x8>)
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000020 	.word	0x20000020

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	2600      	movs	r6, #0
 80040c4:	4d0c      	ldr	r5, [pc, #48]	@ (80040f8 <__libc_init_array+0x38>)
 80040c6:	4c0d      	ldr	r4, [pc, #52]	@ (80040fc <__libc_init_array+0x3c>)
 80040c8:	1b64      	subs	r4, r4, r5
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	42a6      	cmp	r6, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	f001 fece 	bl	8005e70 <_init>
 80040d4:	2600      	movs	r6, #0
 80040d6:	4d0a      	ldr	r5, [pc, #40]	@ (8004100 <__libc_init_array+0x40>)
 80040d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004104 <__libc_init_array+0x44>)
 80040da:	1b64      	subs	r4, r4, r5
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	42a6      	cmp	r6, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e8:	4798      	blx	r3
 80040ea:	3601      	adds	r6, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f2:	4798      	blx	r3
 80040f4:	3601      	adds	r6, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	0800627c 	.word	0x0800627c
 80040fc:	0800627c 	.word	0x0800627c
 8004100:	0800627c 	.word	0x0800627c
 8004104:	08006280 	.word	0x08006280

08004108 <__retarget_lock_init_recursive>:
 8004108:	4770      	bx	lr

0800410a <__retarget_lock_acquire_recursive>:
 800410a:	4770      	bx	lr

0800410c <__retarget_lock_release_recursive>:
 800410c:	4770      	bx	lr

0800410e <memchr>:
 800410e:	4603      	mov	r3, r0
 8004110:	b510      	push	{r4, lr}
 8004112:	b2c9      	uxtb	r1, r1
 8004114:	4402      	add	r2, r0
 8004116:	4293      	cmp	r3, r2
 8004118:	4618      	mov	r0, r3
 800411a:	d101      	bne.n	8004120 <memchr+0x12>
 800411c:	2000      	movs	r0, #0
 800411e:	e003      	b.n	8004128 <memchr+0x1a>
 8004120:	7804      	ldrb	r4, [r0, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	428c      	cmp	r4, r1
 8004126:	d1f6      	bne.n	8004116 <memchr+0x8>
 8004128:	bd10      	pop	{r4, pc}

0800412a <quorem>:
 800412a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412e:	6903      	ldr	r3, [r0, #16]
 8004130:	690c      	ldr	r4, [r1, #16]
 8004132:	4607      	mov	r7, r0
 8004134:	42a3      	cmp	r3, r4
 8004136:	db7e      	blt.n	8004236 <quorem+0x10c>
 8004138:	3c01      	subs	r4, #1
 800413a:	00a3      	lsls	r3, r4, #2
 800413c:	f100 0514 	add.w	r5, r0, #20
 8004140:	f101 0814 	add.w	r8, r1, #20
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004154:	3301      	adds	r3, #1
 8004156:	429a      	cmp	r2, r3
 8004158:	fbb2 f6f3 	udiv	r6, r2, r3
 800415c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004160:	d32e      	bcc.n	80041c0 <quorem+0x96>
 8004162:	f04f 0a00 	mov.w	sl, #0
 8004166:	46c4      	mov	ip, r8
 8004168:	46ae      	mov	lr, r5
 800416a:	46d3      	mov	fp, sl
 800416c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004170:	b298      	uxth	r0, r3
 8004172:	fb06 a000 	mla	r0, r6, r0, sl
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	0c02      	lsrs	r2, r0, #16
 800417a:	fb06 2303 	mla	r3, r6, r3, r2
 800417e:	f8de 2000 	ldr.w	r2, [lr]
 8004182:	b280      	uxth	r0, r0
 8004184:	b292      	uxth	r2, r2
 8004186:	1a12      	subs	r2, r2, r0
 8004188:	445a      	add	r2, fp
 800418a:	f8de 0000 	ldr.w	r0, [lr]
 800418e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004192:	b29b      	uxth	r3, r3
 8004194:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004198:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800419c:	b292      	uxth	r2, r2
 800419e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80041a2:	45e1      	cmp	r9, ip
 80041a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80041a8:	f84e 2b04 	str.w	r2, [lr], #4
 80041ac:	d2de      	bcs.n	800416c <quorem+0x42>
 80041ae:	9b00      	ldr	r3, [sp, #0]
 80041b0:	58eb      	ldr	r3, [r5, r3]
 80041b2:	b92b      	cbnz	r3, 80041c0 <quorem+0x96>
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	3b04      	subs	r3, #4
 80041b8:	429d      	cmp	r5, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	d32f      	bcc.n	800421e <quorem+0xf4>
 80041be:	613c      	str	r4, [r7, #16]
 80041c0:	4638      	mov	r0, r7
 80041c2:	f001 f981 	bl	80054c8 <__mcmp>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	db25      	blt.n	8004216 <quorem+0xec>
 80041ca:	4629      	mov	r1, r5
 80041cc:	2000      	movs	r0, #0
 80041ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80041d2:	f8d1 c000 	ldr.w	ip, [r1]
 80041d6:	fa1f fe82 	uxth.w	lr, r2
 80041da:	fa1f f38c 	uxth.w	r3, ip
 80041de:	eba3 030e 	sub.w	r3, r3, lr
 80041e2:	4403      	add	r3, r0
 80041e4:	0c12      	lsrs	r2, r2, #16
 80041e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80041ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041f4:	45c1      	cmp	r9, r8
 80041f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041fa:	f841 3b04 	str.w	r3, [r1], #4
 80041fe:	d2e6      	bcs.n	80041ce <quorem+0xa4>
 8004200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004208:	b922      	cbnz	r2, 8004214 <quorem+0xea>
 800420a:	3b04      	subs	r3, #4
 800420c:	429d      	cmp	r5, r3
 800420e:	461a      	mov	r2, r3
 8004210:	d30b      	bcc.n	800422a <quorem+0x100>
 8004212:	613c      	str	r4, [r7, #16]
 8004214:	3601      	adds	r6, #1
 8004216:	4630      	mov	r0, r6
 8004218:	b003      	add	sp, #12
 800421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	3b04      	subs	r3, #4
 8004222:	2a00      	cmp	r2, #0
 8004224:	d1cb      	bne.n	80041be <quorem+0x94>
 8004226:	3c01      	subs	r4, #1
 8004228:	e7c6      	b.n	80041b8 <quorem+0x8e>
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	3b04      	subs	r3, #4
 800422e:	2a00      	cmp	r2, #0
 8004230:	d1ef      	bne.n	8004212 <quorem+0xe8>
 8004232:	3c01      	subs	r4, #1
 8004234:	e7ea      	b.n	800420c <quorem+0xe2>
 8004236:	2000      	movs	r0, #0
 8004238:	e7ee      	b.n	8004218 <quorem+0xee>
 800423a:	0000      	movs	r0, r0
 800423c:	0000      	movs	r0, r0
	...

08004240 <_dtoa_r>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	4614      	mov	r4, r2
 8004246:	461d      	mov	r5, r3
 8004248:	69c7      	ldr	r7, [r0, #28]
 800424a:	b097      	sub	sp, #92	@ 0x5c
 800424c:	4681      	mov	r9, r0
 800424e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004252:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004254:	b97f      	cbnz	r7, 8004276 <_dtoa_r+0x36>
 8004256:	2010      	movs	r0, #16
 8004258:	f000 fe0e 	bl	8004e78 <malloc>
 800425c:	4602      	mov	r2, r0
 800425e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004262:	b920      	cbnz	r0, 800426e <_dtoa_r+0x2e>
 8004264:	21ef      	movs	r1, #239	@ 0xef
 8004266:	4bac      	ldr	r3, [pc, #688]	@ (8004518 <_dtoa_r+0x2d8>)
 8004268:	48ac      	ldr	r0, [pc, #688]	@ (800451c <_dtoa_r+0x2dc>)
 800426a:	f001 fafb 	bl	8005864 <__assert_func>
 800426e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004272:	6007      	str	r7, [r0, #0]
 8004274:	60c7      	str	r7, [r0, #12]
 8004276:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800427a:	6819      	ldr	r1, [r3, #0]
 800427c:	b159      	cbz	r1, 8004296 <_dtoa_r+0x56>
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	2301      	movs	r3, #1
 8004282:	4093      	lsls	r3, r2
 8004284:	604a      	str	r2, [r1, #4]
 8004286:	608b      	str	r3, [r1, #8]
 8004288:	4648      	mov	r0, r9
 800428a:	f000 feeb 	bl	8005064 <_Bfree>
 800428e:	2200      	movs	r2, #0
 8004290:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	1e2b      	subs	r3, r5, #0
 8004298:	bfaf      	iteee	ge
 800429a:	2300      	movge	r3, #0
 800429c:	2201      	movlt	r2, #1
 800429e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80042a2:	9307      	strlt	r3, [sp, #28]
 80042a4:	bfa8      	it	ge
 80042a6:	6033      	strge	r3, [r6, #0]
 80042a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80042ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004520 <_dtoa_r+0x2e0>)
 80042ae:	bfb8      	it	lt
 80042b0:	6032      	strlt	r2, [r6, #0]
 80042b2:	ea33 0308 	bics.w	r3, r3, r8
 80042b6:	d112      	bne.n	80042de <_dtoa_r+0x9e>
 80042b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80042bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80042c4:	4323      	orrs	r3, r4
 80042c6:	f000 855e 	beq.w	8004d86 <_dtoa_r+0xb46>
 80042ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004524 <_dtoa_r+0x2e4>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8560 	beq.w	8004d96 <_dtoa_r+0xb56>
 80042d6:	f10a 0303 	add.w	r3, sl, #3
 80042da:	f000 bd5a 	b.w	8004d92 <_dtoa_r+0xb52>
 80042de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80042e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042ea:	2200      	movs	r2, #0
 80042ec:	2300      	movs	r3, #0
 80042ee:	f7fc fb5b 	bl	80009a8 <__aeabi_dcmpeq>
 80042f2:	4607      	mov	r7, r0
 80042f4:	b158      	cbz	r0, 800430e <_dtoa_r+0xce>
 80042f6:	2301      	movs	r3, #1
 80042f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042fe:	b113      	cbz	r3, 8004306 <_dtoa_r+0xc6>
 8004300:	4b89      	ldr	r3, [pc, #548]	@ (8004528 <_dtoa_r+0x2e8>)
 8004302:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800452c <_dtoa_r+0x2ec>
 800430a:	f000 bd44 	b.w	8004d96 <_dtoa_r+0xb56>
 800430e:	ab14      	add	r3, sp, #80	@ 0x50
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	ab15      	add	r3, sp, #84	@ 0x54
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4648      	mov	r0, r9
 8004318:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800431c:	f001 f984 	bl	8005628 <__d2b>
 8004320:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004324:	9003      	str	r0, [sp, #12]
 8004326:	2e00      	cmp	r6, #0
 8004328:	d078      	beq.n	800441c <_dtoa_r+0x1dc>
 800432a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800432e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004330:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004338:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800433c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004340:	9712      	str	r7, [sp, #72]	@ 0x48
 8004342:	4619      	mov	r1, r3
 8004344:	2200      	movs	r2, #0
 8004346:	4b7a      	ldr	r3, [pc, #488]	@ (8004530 <_dtoa_r+0x2f0>)
 8004348:	f7fb ff0e 	bl	8000168 <__aeabi_dsub>
 800434c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004500 <_dtoa_r+0x2c0>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fc f8c1 	bl	80004d8 <__aeabi_dmul>
 8004356:	a36c      	add	r3, pc, #432	@ (adr r3, 8004508 <_dtoa_r+0x2c8>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fb ff06 	bl	800016c <__adddf3>
 8004360:	4604      	mov	r4, r0
 8004362:	4630      	mov	r0, r6
 8004364:	460d      	mov	r5, r1
 8004366:	f7fc f84d 	bl	8000404 <__aeabi_i2d>
 800436a:	a369      	add	r3, pc, #420	@ (adr r3, 8004510 <_dtoa_r+0x2d0>)
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f7fc f8b2 	bl	80004d8 <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4620      	mov	r0, r4
 800437a:	4629      	mov	r1, r5
 800437c:	f7fb fef6 	bl	800016c <__adddf3>
 8004380:	4604      	mov	r4, r0
 8004382:	460d      	mov	r5, r1
 8004384:	f7fc fb58 	bl	8000a38 <__aeabi_d2iz>
 8004388:	2200      	movs	r2, #0
 800438a:	4607      	mov	r7, r0
 800438c:	2300      	movs	r3, #0
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	f7fc fb13 	bl	80009bc <__aeabi_dcmplt>
 8004396:	b140      	cbz	r0, 80043aa <_dtoa_r+0x16a>
 8004398:	4638      	mov	r0, r7
 800439a:	f7fc f833 	bl	8000404 <__aeabi_i2d>
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	f7fc fb01 	bl	80009a8 <__aeabi_dcmpeq>
 80043a6:	b900      	cbnz	r0, 80043aa <_dtoa_r+0x16a>
 80043a8:	3f01      	subs	r7, #1
 80043aa:	2f16      	cmp	r7, #22
 80043ac:	d854      	bhi.n	8004458 <_dtoa_r+0x218>
 80043ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043b2:	4b60      	ldr	r3, [pc, #384]	@ (8004534 <_dtoa_r+0x2f4>)
 80043b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fc fafe 	bl	80009bc <__aeabi_dcmplt>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d04b      	beq.n	800445c <_dtoa_r+0x21c>
 80043c4:	2300      	movs	r3, #0
 80043c6:	3f01      	subs	r7, #1
 80043c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043cc:	1b9b      	subs	r3, r3, r6
 80043ce:	1e5a      	subs	r2, r3, #1
 80043d0:	bf49      	itett	mi
 80043d2:	f1c3 0301 	rsbmi	r3, r3, #1
 80043d6:	2300      	movpl	r3, #0
 80043d8:	9304      	strmi	r3, [sp, #16]
 80043da:	2300      	movmi	r3, #0
 80043dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043de:	bf54      	ite	pl
 80043e0:	9304      	strpl	r3, [sp, #16]
 80043e2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80043e4:	2f00      	cmp	r7, #0
 80043e6:	db3b      	blt.n	8004460 <_dtoa_r+0x220>
 80043e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ea:	970e      	str	r7, [sp, #56]	@ 0x38
 80043ec:	443b      	add	r3, r7
 80043ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80043f0:	2300      	movs	r3, #0
 80043f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80043f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d865      	bhi.n	80044c6 <_dtoa_r+0x286>
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	bfc4      	itt	gt
 80043fe:	3b04      	subgt	r3, #4
 8004400:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004404:	bfc8      	it	gt
 8004406:	2400      	movgt	r4, #0
 8004408:	f1a3 0302 	sub.w	r3, r3, #2
 800440c:	bfd8      	it	le
 800440e:	2401      	movle	r4, #1
 8004410:	2b03      	cmp	r3, #3
 8004412:	d864      	bhi.n	80044de <_dtoa_r+0x29e>
 8004414:	e8df f003 	tbb	[pc, r3]
 8004418:	2c385553 	.word	0x2c385553
 800441c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004420:	441e      	add	r6, r3
 8004422:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004426:	2b20      	cmp	r3, #32
 8004428:	bfc1      	itttt	gt
 800442a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800442e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004432:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004436:	fa24 f303 	lsrgt.w	r3, r4, r3
 800443a:	bfd6      	itet	le
 800443c:	f1c3 0320 	rsble	r3, r3, #32
 8004440:	ea48 0003 	orrgt.w	r0, r8, r3
 8004444:	fa04 f003 	lslle.w	r0, r4, r3
 8004448:	f7fb ffcc 	bl	80003e4 <__aeabi_ui2d>
 800444c:	2201      	movs	r2, #1
 800444e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004452:	3e01      	subs	r6, #1
 8004454:	9212      	str	r2, [sp, #72]	@ 0x48
 8004456:	e774      	b.n	8004342 <_dtoa_r+0x102>
 8004458:	2301      	movs	r3, #1
 800445a:	e7b5      	b.n	80043c8 <_dtoa_r+0x188>
 800445c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800445e:	e7b4      	b.n	80043ca <_dtoa_r+0x18a>
 8004460:	9b04      	ldr	r3, [sp, #16]
 8004462:	1bdb      	subs	r3, r3, r7
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	427b      	negs	r3, r7
 8004468:	930a      	str	r3, [sp, #40]	@ 0x28
 800446a:	2300      	movs	r3, #0
 800446c:	930e      	str	r3, [sp, #56]	@ 0x38
 800446e:	e7c1      	b.n	80043f4 <_dtoa_r+0x1b4>
 8004470:	2301      	movs	r3, #1
 8004472:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004474:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004476:	eb07 0b03 	add.w	fp, r7, r3
 800447a:	f10b 0301 	add.w	r3, fp, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	9308      	str	r3, [sp, #32]
 8004482:	bfb8      	it	lt
 8004484:	2301      	movlt	r3, #1
 8004486:	e006      	b.n	8004496 <_dtoa_r+0x256>
 8004488:	2301      	movs	r3, #1
 800448a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800448c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800448e:	2b00      	cmp	r3, #0
 8004490:	dd28      	ble.n	80044e4 <_dtoa_r+0x2a4>
 8004492:	469b      	mov	fp, r3
 8004494:	9308      	str	r3, [sp, #32]
 8004496:	2100      	movs	r1, #0
 8004498:	2204      	movs	r2, #4
 800449a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800449e:	f102 0514 	add.w	r5, r2, #20
 80044a2:	429d      	cmp	r5, r3
 80044a4:	d926      	bls.n	80044f4 <_dtoa_r+0x2b4>
 80044a6:	6041      	str	r1, [r0, #4]
 80044a8:	4648      	mov	r0, r9
 80044aa:	f000 fd9b 	bl	8004fe4 <_Balloc>
 80044ae:	4682      	mov	sl, r0
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d143      	bne.n	800453c <_dtoa_r+0x2fc>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80044ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004538 <_dtoa_r+0x2f8>)
 80044bc:	e6d4      	b.n	8004268 <_dtoa_r+0x28>
 80044be:	2300      	movs	r3, #0
 80044c0:	e7e3      	b.n	800448a <_dtoa_r+0x24a>
 80044c2:	2300      	movs	r3, #0
 80044c4:	e7d5      	b.n	8004472 <_dtoa_r+0x232>
 80044c6:	2401      	movs	r4, #1
 80044c8:	2300      	movs	r3, #0
 80044ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80044cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80044ce:	f04f 3bff 	mov.w	fp, #4294967295
 80044d2:	2200      	movs	r2, #0
 80044d4:	2312      	movs	r3, #18
 80044d6:	f8cd b020 	str.w	fp, [sp, #32]
 80044da:	9221      	str	r2, [sp, #132]	@ 0x84
 80044dc:	e7db      	b.n	8004496 <_dtoa_r+0x256>
 80044de:	2301      	movs	r3, #1
 80044e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044e2:	e7f4      	b.n	80044ce <_dtoa_r+0x28e>
 80044e4:	f04f 0b01 	mov.w	fp, #1
 80044e8:	465b      	mov	r3, fp
 80044ea:	f8cd b020 	str.w	fp, [sp, #32]
 80044ee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80044f2:	e7d0      	b.n	8004496 <_dtoa_r+0x256>
 80044f4:	3101      	adds	r1, #1
 80044f6:	0052      	lsls	r2, r2, #1
 80044f8:	e7d1      	b.n	800449e <_dtoa_r+0x25e>
 80044fa:	bf00      	nop
 80044fc:	f3af 8000 	nop.w
 8004500:	636f4361 	.word	0x636f4361
 8004504:	3fd287a7 	.word	0x3fd287a7
 8004508:	8b60c8b3 	.word	0x8b60c8b3
 800450c:	3fc68a28 	.word	0x3fc68a28
 8004510:	509f79fb 	.word	0x509f79fb
 8004514:	3fd34413 	.word	0x3fd34413
 8004518:	08005f43 	.word	0x08005f43
 800451c:	08005f5a 	.word	0x08005f5a
 8004520:	7ff00000 	.word	0x7ff00000
 8004524:	08005f3f 	.word	0x08005f3f
 8004528:	08005f13 	.word	0x08005f13
 800452c:	08005f12 	.word	0x08005f12
 8004530:	3ff80000 	.word	0x3ff80000
 8004534:	080060a8 	.word	0x080060a8
 8004538:	08005fb2 	.word	0x08005fb2
 800453c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004540:	6018      	str	r0, [r3, #0]
 8004542:	9b08      	ldr	r3, [sp, #32]
 8004544:	2b0e      	cmp	r3, #14
 8004546:	f200 80a1 	bhi.w	800468c <_dtoa_r+0x44c>
 800454a:	2c00      	cmp	r4, #0
 800454c:	f000 809e 	beq.w	800468c <_dtoa_r+0x44c>
 8004550:	2f00      	cmp	r7, #0
 8004552:	dd33      	ble.n	80045bc <_dtoa_r+0x37c>
 8004554:	4b9c      	ldr	r3, [pc, #624]	@ (80047c8 <_dtoa_r+0x588>)
 8004556:	f007 020f 	and.w	r2, r7, #15
 800455a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800455e:	05f8      	lsls	r0, r7, #23
 8004560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004564:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800456c:	d516      	bpl.n	800459c <_dtoa_r+0x35c>
 800456e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004572:	4b96      	ldr	r3, [pc, #600]	@ (80047cc <_dtoa_r+0x58c>)
 8004574:	2603      	movs	r6, #3
 8004576:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800457a:	f7fc f8d7 	bl	800072c <__aeabi_ddiv>
 800457e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004582:	f004 040f 	and.w	r4, r4, #15
 8004586:	4d91      	ldr	r5, [pc, #580]	@ (80047cc <_dtoa_r+0x58c>)
 8004588:	b954      	cbnz	r4, 80045a0 <_dtoa_r+0x360>
 800458a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800458e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004592:	f7fc f8cb 	bl	800072c <__aeabi_ddiv>
 8004596:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800459a:	e028      	b.n	80045ee <_dtoa_r+0x3ae>
 800459c:	2602      	movs	r6, #2
 800459e:	e7f2      	b.n	8004586 <_dtoa_r+0x346>
 80045a0:	07e1      	lsls	r1, r4, #31
 80045a2:	d508      	bpl.n	80045b6 <_dtoa_r+0x376>
 80045a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045ac:	f7fb ff94 	bl	80004d8 <__aeabi_dmul>
 80045b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045b4:	3601      	adds	r6, #1
 80045b6:	1064      	asrs	r4, r4, #1
 80045b8:	3508      	adds	r5, #8
 80045ba:	e7e5      	b.n	8004588 <_dtoa_r+0x348>
 80045bc:	f000 80af 	beq.w	800471e <_dtoa_r+0x4de>
 80045c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045c4:	427c      	negs	r4, r7
 80045c6:	4b80      	ldr	r3, [pc, #512]	@ (80047c8 <_dtoa_r+0x588>)
 80045c8:	f004 020f 	and.w	r2, r4, #15
 80045cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb ff80 	bl	80004d8 <__aeabi_dmul>
 80045d8:	2602      	movs	r6, #2
 80045da:	2300      	movs	r3, #0
 80045dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045e0:	4d7a      	ldr	r5, [pc, #488]	@ (80047cc <_dtoa_r+0x58c>)
 80045e2:	1124      	asrs	r4, r4, #4
 80045e4:	2c00      	cmp	r4, #0
 80045e6:	f040 808f 	bne.w	8004708 <_dtoa_r+0x4c8>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d3      	bne.n	8004596 <_dtoa_r+0x356>
 80045ee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80045f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8094 	beq.w	8004722 <_dtoa_r+0x4e2>
 80045fa:	2200      	movs	r2, #0
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	4b73      	ldr	r3, [pc, #460]	@ (80047d0 <_dtoa_r+0x590>)
 8004602:	f7fc f9db 	bl	80009bc <__aeabi_dcmplt>
 8004606:	2800      	cmp	r0, #0
 8004608:	f000 808b 	beq.w	8004722 <_dtoa_r+0x4e2>
 800460c:	9b08      	ldr	r3, [sp, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8087 	beq.w	8004722 <_dtoa_r+0x4e2>
 8004614:	f1bb 0f00 	cmp.w	fp, #0
 8004618:	dd34      	ble.n	8004684 <_dtoa_r+0x444>
 800461a:	4620      	mov	r0, r4
 800461c:	2200      	movs	r2, #0
 800461e:	4629      	mov	r1, r5
 8004620:	4b6c      	ldr	r3, [pc, #432]	@ (80047d4 <_dtoa_r+0x594>)
 8004622:	f7fb ff59 	bl	80004d8 <__aeabi_dmul>
 8004626:	465c      	mov	r4, fp
 8004628:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800462c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004630:	3601      	adds	r6, #1
 8004632:	4630      	mov	r0, r6
 8004634:	f7fb fee6 	bl	8000404 <__aeabi_i2d>
 8004638:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800463c:	f7fb ff4c 	bl	80004d8 <__aeabi_dmul>
 8004640:	2200      	movs	r2, #0
 8004642:	4b65      	ldr	r3, [pc, #404]	@ (80047d8 <_dtoa_r+0x598>)
 8004644:	f7fb fd92 	bl	800016c <__adddf3>
 8004648:	4605      	mov	r5, r0
 800464a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800464e:	2c00      	cmp	r4, #0
 8004650:	d16a      	bne.n	8004728 <_dtoa_r+0x4e8>
 8004652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004656:	2200      	movs	r2, #0
 8004658:	4b60      	ldr	r3, [pc, #384]	@ (80047dc <_dtoa_r+0x59c>)
 800465a:	f7fb fd85 	bl	8000168 <__aeabi_dsub>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004666:	462a      	mov	r2, r5
 8004668:	4633      	mov	r3, r6
 800466a:	f7fc f9c5 	bl	80009f8 <__aeabi_dcmpgt>
 800466e:	2800      	cmp	r0, #0
 8004670:	f040 8298 	bne.w	8004ba4 <_dtoa_r+0x964>
 8004674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004678:	462a      	mov	r2, r5
 800467a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800467e:	f7fc f99d 	bl	80009bc <__aeabi_dcmplt>
 8004682:	bb38      	cbnz	r0, 80046d4 <_dtoa_r+0x494>
 8004684:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004688:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800468c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800468e:	2b00      	cmp	r3, #0
 8004690:	f2c0 8157 	blt.w	8004942 <_dtoa_r+0x702>
 8004694:	2f0e      	cmp	r7, #14
 8004696:	f300 8154 	bgt.w	8004942 <_dtoa_r+0x702>
 800469a:	4b4b      	ldr	r3, [pc, #300]	@ (80047c8 <_dtoa_r+0x588>)
 800469c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f280 80e5 	bge.w	800487a <_dtoa_r+0x63a>
 80046b0:	9b08      	ldr	r3, [sp, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f300 80e1 	bgt.w	800487a <_dtoa_r+0x63a>
 80046b8:	d10c      	bne.n	80046d4 <_dtoa_r+0x494>
 80046ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046be:	2200      	movs	r2, #0
 80046c0:	4b46      	ldr	r3, [pc, #280]	@ (80047dc <_dtoa_r+0x59c>)
 80046c2:	f7fb ff09 	bl	80004d8 <__aeabi_dmul>
 80046c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046ca:	f7fc f98b 	bl	80009e4 <__aeabi_dcmpge>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f000 8266 	beq.w	8004ba0 <_dtoa_r+0x960>
 80046d4:	2400      	movs	r4, #0
 80046d6:	4625      	mov	r5, r4
 80046d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046da:	4656      	mov	r6, sl
 80046dc:	ea6f 0803 	mvn.w	r8, r3
 80046e0:	2700      	movs	r7, #0
 80046e2:	4621      	mov	r1, r4
 80046e4:	4648      	mov	r0, r9
 80046e6:	f000 fcbd 	bl	8005064 <_Bfree>
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	f000 80bd 	beq.w	800486a <_dtoa_r+0x62a>
 80046f0:	b12f      	cbz	r7, 80046fe <_dtoa_r+0x4be>
 80046f2:	42af      	cmp	r7, r5
 80046f4:	d003      	beq.n	80046fe <_dtoa_r+0x4be>
 80046f6:	4639      	mov	r1, r7
 80046f8:	4648      	mov	r0, r9
 80046fa:	f000 fcb3 	bl	8005064 <_Bfree>
 80046fe:	4629      	mov	r1, r5
 8004700:	4648      	mov	r0, r9
 8004702:	f000 fcaf 	bl	8005064 <_Bfree>
 8004706:	e0b0      	b.n	800486a <_dtoa_r+0x62a>
 8004708:	07e2      	lsls	r2, r4, #31
 800470a:	d505      	bpl.n	8004718 <_dtoa_r+0x4d8>
 800470c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004710:	f7fb fee2 	bl	80004d8 <__aeabi_dmul>
 8004714:	2301      	movs	r3, #1
 8004716:	3601      	adds	r6, #1
 8004718:	1064      	asrs	r4, r4, #1
 800471a:	3508      	adds	r5, #8
 800471c:	e762      	b.n	80045e4 <_dtoa_r+0x3a4>
 800471e:	2602      	movs	r6, #2
 8004720:	e765      	b.n	80045ee <_dtoa_r+0x3ae>
 8004722:	46b8      	mov	r8, r7
 8004724:	9c08      	ldr	r4, [sp, #32]
 8004726:	e784      	b.n	8004632 <_dtoa_r+0x3f2>
 8004728:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <_dtoa_r+0x588>)
 800472a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800472c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004734:	4454      	add	r4, sl
 8004736:	2900      	cmp	r1, #0
 8004738:	d054      	beq.n	80047e4 <_dtoa_r+0x5a4>
 800473a:	2000      	movs	r0, #0
 800473c:	4928      	ldr	r1, [pc, #160]	@ (80047e0 <_dtoa_r+0x5a0>)
 800473e:	f7fb fff5 	bl	800072c <__aeabi_ddiv>
 8004742:	4633      	mov	r3, r6
 8004744:	462a      	mov	r2, r5
 8004746:	f7fb fd0f 	bl	8000168 <__aeabi_dsub>
 800474a:	4656      	mov	r6, sl
 800474c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004754:	f7fc f970 	bl	8000a38 <__aeabi_d2iz>
 8004758:	4605      	mov	r5, r0
 800475a:	f7fb fe53 	bl	8000404 <__aeabi_i2d>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004766:	f7fb fcff 	bl	8000168 <__aeabi_dsub>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	3530      	adds	r5, #48	@ 0x30
 8004770:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004778:	f806 5b01 	strb.w	r5, [r6], #1
 800477c:	f7fc f91e 	bl	80009bc <__aeabi_dcmplt>
 8004780:	2800      	cmp	r0, #0
 8004782:	d172      	bne.n	800486a <_dtoa_r+0x62a>
 8004784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004788:	2000      	movs	r0, #0
 800478a:	4911      	ldr	r1, [pc, #68]	@ (80047d0 <_dtoa_r+0x590>)
 800478c:	f7fb fcec 	bl	8000168 <__aeabi_dsub>
 8004790:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004794:	f7fc f912 	bl	80009bc <__aeabi_dcmplt>
 8004798:	2800      	cmp	r0, #0
 800479a:	f040 80b4 	bne.w	8004906 <_dtoa_r+0x6c6>
 800479e:	42a6      	cmp	r6, r4
 80047a0:	f43f af70 	beq.w	8004684 <_dtoa_r+0x444>
 80047a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047a8:	2200      	movs	r2, #0
 80047aa:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <_dtoa_r+0x594>)
 80047ac:	f7fb fe94 	bl	80004d8 <__aeabi_dmul>
 80047b0:	2200      	movs	r2, #0
 80047b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <_dtoa_r+0x594>)
 80047bc:	f7fb fe8c 	bl	80004d8 <__aeabi_dmul>
 80047c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047c4:	e7c4      	b.n	8004750 <_dtoa_r+0x510>
 80047c6:	bf00      	nop
 80047c8:	080060a8 	.word	0x080060a8
 80047cc:	08006080 	.word	0x08006080
 80047d0:	3ff00000 	.word	0x3ff00000
 80047d4:	40240000 	.word	0x40240000
 80047d8:	401c0000 	.word	0x401c0000
 80047dc:	40140000 	.word	0x40140000
 80047e0:	3fe00000 	.word	0x3fe00000
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7fb fe76 	bl	80004d8 <__aeabi_dmul>
 80047ec:	4656      	mov	r6, sl
 80047ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80047f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047f8:	f7fc f91e 	bl	8000a38 <__aeabi_d2iz>
 80047fc:	4605      	mov	r5, r0
 80047fe:	f7fb fe01 	bl	8000404 <__aeabi_i2d>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480a:	f7fb fcad 	bl	8000168 <__aeabi_dsub>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	3530      	adds	r5, #48	@ 0x30
 8004814:	f806 5b01 	strb.w	r5, [r6], #1
 8004818:	42a6      	cmp	r6, r4
 800481a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	d124      	bne.n	800486e <_dtoa_r+0x62e>
 8004824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004828:	4bae      	ldr	r3, [pc, #696]	@ (8004ae4 <_dtoa_r+0x8a4>)
 800482a:	f7fb fc9f 	bl	800016c <__adddf3>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004836:	f7fc f8df 	bl	80009f8 <__aeabi_dcmpgt>
 800483a:	2800      	cmp	r0, #0
 800483c:	d163      	bne.n	8004906 <_dtoa_r+0x6c6>
 800483e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004842:	2000      	movs	r0, #0
 8004844:	49a7      	ldr	r1, [pc, #668]	@ (8004ae4 <_dtoa_r+0x8a4>)
 8004846:	f7fb fc8f 	bl	8000168 <__aeabi_dsub>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004852:	f7fc f8b3 	bl	80009bc <__aeabi_dcmplt>
 8004856:	2800      	cmp	r0, #0
 8004858:	f43f af14 	beq.w	8004684 <_dtoa_r+0x444>
 800485c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800485e:	1e73      	subs	r3, r6, #1
 8004860:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004862:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004866:	2b30      	cmp	r3, #48	@ 0x30
 8004868:	d0f8      	beq.n	800485c <_dtoa_r+0x61c>
 800486a:	4647      	mov	r7, r8
 800486c:	e03b      	b.n	80048e6 <_dtoa_r+0x6a6>
 800486e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ae8 <_dtoa_r+0x8a8>)
 8004870:	f7fb fe32 	bl	80004d8 <__aeabi_dmul>
 8004874:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004878:	e7bc      	b.n	80047f4 <_dtoa_r+0x5b4>
 800487a:	4656      	mov	r6, sl
 800487c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	f7fb ff50 	bl	800072c <__aeabi_ddiv>
 800488c:	f7fc f8d4 	bl	8000a38 <__aeabi_d2iz>
 8004890:	4680      	mov	r8, r0
 8004892:	f7fb fdb7 	bl	8000404 <__aeabi_i2d>
 8004896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800489a:	f7fb fe1d 	bl	80004d8 <__aeabi_dmul>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4620      	mov	r0, r4
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7fb fc5f 	bl	8000168 <__aeabi_dsub>
 80048aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80048ae:	9d08      	ldr	r5, [sp, #32]
 80048b0:	f806 4b01 	strb.w	r4, [r6], #1
 80048b4:	eba6 040a 	sub.w	r4, r6, sl
 80048b8:	42a5      	cmp	r5, r4
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	d133      	bne.n	8004928 <_dtoa_r+0x6e8>
 80048c0:	f7fb fc54 	bl	800016c <__adddf3>
 80048c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c8:	4604      	mov	r4, r0
 80048ca:	460d      	mov	r5, r1
 80048cc:	f7fc f894 	bl	80009f8 <__aeabi_dcmpgt>
 80048d0:	b9c0      	cbnz	r0, 8004904 <_dtoa_r+0x6c4>
 80048d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fc f865 	bl	80009a8 <__aeabi_dcmpeq>
 80048de:	b110      	cbz	r0, 80048e6 <_dtoa_r+0x6a6>
 80048e0:	f018 0f01 	tst.w	r8, #1
 80048e4:	d10e      	bne.n	8004904 <_dtoa_r+0x6c4>
 80048e6:	4648      	mov	r0, r9
 80048e8:	9903      	ldr	r1, [sp, #12]
 80048ea:	f000 fbbb 	bl	8005064 <_Bfree>
 80048ee:	2300      	movs	r3, #0
 80048f0:	7033      	strb	r3, [r6, #0]
 80048f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80048f4:	3701      	adds	r7, #1
 80048f6:	601f      	str	r7, [r3, #0]
 80048f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 824b 	beq.w	8004d96 <_dtoa_r+0xb56>
 8004900:	601e      	str	r6, [r3, #0]
 8004902:	e248      	b.n	8004d96 <_dtoa_r+0xb56>
 8004904:	46b8      	mov	r8, r7
 8004906:	4633      	mov	r3, r6
 8004908:	461e      	mov	r6, r3
 800490a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800490e:	2a39      	cmp	r2, #57	@ 0x39
 8004910:	d106      	bne.n	8004920 <_dtoa_r+0x6e0>
 8004912:	459a      	cmp	sl, r3
 8004914:	d1f8      	bne.n	8004908 <_dtoa_r+0x6c8>
 8004916:	2230      	movs	r2, #48	@ 0x30
 8004918:	f108 0801 	add.w	r8, r8, #1
 800491c:	f88a 2000 	strb.w	r2, [sl]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	3201      	adds	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	e7a0      	b.n	800486a <_dtoa_r+0x62a>
 8004928:	2200      	movs	r2, #0
 800492a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ae8 <_dtoa_r+0x8a8>)
 800492c:	f7fb fdd4 	bl	80004d8 <__aeabi_dmul>
 8004930:	2200      	movs	r2, #0
 8004932:	2300      	movs	r3, #0
 8004934:	4604      	mov	r4, r0
 8004936:	460d      	mov	r5, r1
 8004938:	f7fc f836 	bl	80009a8 <__aeabi_dcmpeq>
 800493c:	2800      	cmp	r0, #0
 800493e:	d09f      	beq.n	8004880 <_dtoa_r+0x640>
 8004940:	e7d1      	b.n	80048e6 <_dtoa_r+0x6a6>
 8004942:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004944:	2a00      	cmp	r2, #0
 8004946:	f000 80ea 	beq.w	8004b1e <_dtoa_r+0x8de>
 800494a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800494c:	2a01      	cmp	r2, #1
 800494e:	f300 80cd 	bgt.w	8004aec <_dtoa_r+0x8ac>
 8004952:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004954:	2a00      	cmp	r2, #0
 8004956:	f000 80c1 	beq.w	8004adc <_dtoa_r+0x89c>
 800495a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800495e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004960:	9e04      	ldr	r6, [sp, #16]
 8004962:	9a04      	ldr	r2, [sp, #16]
 8004964:	2101      	movs	r1, #1
 8004966:	441a      	add	r2, r3
 8004968:	9204      	str	r2, [sp, #16]
 800496a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800496c:	4648      	mov	r0, r9
 800496e:	441a      	add	r2, r3
 8004970:	9209      	str	r2, [sp, #36]	@ 0x24
 8004972:	f000 fc2b 	bl	80051cc <__i2b>
 8004976:	4605      	mov	r5, r0
 8004978:	b166      	cbz	r6, 8004994 <_dtoa_r+0x754>
 800497a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	dd09      	ble.n	8004994 <_dtoa_r+0x754>
 8004980:	42b3      	cmp	r3, r6
 8004982:	bfa8      	it	ge
 8004984:	4633      	movge	r3, r6
 8004986:	9a04      	ldr	r2, [sp, #16]
 8004988:	1af6      	subs	r6, r6, r3
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	9204      	str	r2, [sp, #16]
 800498e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	9309      	str	r3, [sp, #36]	@ 0x24
 8004994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004996:	b30b      	cbz	r3, 80049dc <_dtoa_r+0x79c>
 8004998:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80c6 	beq.w	8004b2c <_dtoa_r+0x8ec>
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	f000 80c0 	beq.w	8004b26 <_dtoa_r+0x8e6>
 80049a6:	4629      	mov	r1, r5
 80049a8:	4622      	mov	r2, r4
 80049aa:	4648      	mov	r0, r9
 80049ac:	f000 fcc6 	bl	800533c <__pow5mult>
 80049b0:	9a03      	ldr	r2, [sp, #12]
 80049b2:	4601      	mov	r1, r0
 80049b4:	4605      	mov	r5, r0
 80049b6:	4648      	mov	r0, r9
 80049b8:	f000 fc1e 	bl	80051f8 <__multiply>
 80049bc:	9903      	ldr	r1, [sp, #12]
 80049be:	4680      	mov	r8, r0
 80049c0:	4648      	mov	r0, r9
 80049c2:	f000 fb4f 	bl	8005064 <_Bfree>
 80049c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049c8:	1b1b      	subs	r3, r3, r4
 80049ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80049cc:	f000 80b1 	beq.w	8004b32 <_dtoa_r+0x8f2>
 80049d0:	4641      	mov	r1, r8
 80049d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049d4:	4648      	mov	r0, r9
 80049d6:	f000 fcb1 	bl	800533c <__pow5mult>
 80049da:	9003      	str	r0, [sp, #12]
 80049dc:	2101      	movs	r1, #1
 80049de:	4648      	mov	r0, r9
 80049e0:	f000 fbf4 	bl	80051cc <__i2b>
 80049e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049e6:	4604      	mov	r4, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 81d8 	beq.w	8004d9e <_dtoa_r+0xb5e>
 80049ee:	461a      	mov	r2, r3
 80049f0:	4601      	mov	r1, r0
 80049f2:	4648      	mov	r0, r9
 80049f4:	f000 fca2 	bl	800533c <__pow5mult>
 80049f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049fa:	4604      	mov	r4, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f300 809f 	bgt.w	8004b40 <_dtoa_r+0x900>
 8004a02:	9b06      	ldr	r3, [sp, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 8097 	bne.w	8004b38 <_dtoa_r+0x8f8>
 8004a0a:	9b07      	ldr	r3, [sp, #28]
 8004a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 8093 	bne.w	8004b3c <_dtoa_r+0x8fc>
 8004a16:	9b07      	ldr	r3, [sp, #28]
 8004a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a1c:	0d1b      	lsrs	r3, r3, #20
 8004a1e:	051b      	lsls	r3, r3, #20
 8004a20:	b133      	cbz	r3, 8004a30 <_dtoa_r+0x7f0>
 8004a22:	9b04      	ldr	r3, [sp, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2e:	2301      	movs	r3, #1
 8004a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 81b8 	beq.w	8004daa <_dtoa_r+0xb6a>
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a40:	6918      	ldr	r0, [r3, #16]
 8004a42:	f000 fb77 	bl	8005134 <__hi0bits>
 8004a46:	f1c0 0020 	rsb	r0, r0, #32
 8004a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a4c:	4418      	add	r0, r3
 8004a4e:	f010 001f 	ands.w	r0, r0, #31
 8004a52:	f000 8082 	beq.w	8004b5a <_dtoa_r+0x91a>
 8004a56:	f1c0 0320 	rsb	r3, r0, #32
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	dd73      	ble.n	8004b46 <_dtoa_r+0x906>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	f1c0 001c 	rsb	r0, r0, #28
 8004a64:	4403      	add	r3, r0
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6a:	4406      	add	r6, r0
 8004a6c:	4403      	add	r3, r0
 8004a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a70:	9b04      	ldr	r3, [sp, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dd05      	ble.n	8004a82 <_dtoa_r+0x842>
 8004a76:	461a      	mov	r2, r3
 8004a78:	4648      	mov	r0, r9
 8004a7a:	9903      	ldr	r1, [sp, #12]
 8004a7c:	f000 fcb8 	bl	80053f0 <__lshift>
 8004a80:	9003      	str	r0, [sp, #12]
 8004a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dd05      	ble.n	8004a94 <_dtoa_r+0x854>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4648      	mov	r0, r9
 8004a8e:	f000 fcaf 	bl	80053f0 <__lshift>
 8004a92:	4604      	mov	r4, r0
 8004a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d061      	beq.n	8004b5e <_dtoa_r+0x91e>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	9803      	ldr	r0, [sp, #12]
 8004a9e:	f000 fd13 	bl	80054c8 <__mcmp>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	da5b      	bge.n	8004b5e <_dtoa_r+0x91e>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	220a      	movs	r2, #10
 8004aaa:	4648      	mov	r0, r9
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	f000 fafb 	bl	80050a8 <__multadd>
 8004ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ab4:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ab8:	9003      	str	r0, [sp, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8177 	beq.w	8004dae <_dtoa_r+0xb6e>
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	220a      	movs	r2, #10
 8004ac6:	4648      	mov	r0, r9
 8004ac8:	f000 faee 	bl	80050a8 <__multadd>
 8004acc:	f1bb 0f00 	cmp.w	fp, #0
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	dc6f      	bgt.n	8004bb4 <_dtoa_r+0x974>
 8004ad4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	dc49      	bgt.n	8004b6e <_dtoa_r+0x92e>
 8004ada:	e06b      	b.n	8004bb4 <_dtoa_r+0x974>
 8004adc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004ae2:	e73c      	b.n	800495e <_dtoa_r+0x71e>
 8004ae4:	3fe00000 	.word	0x3fe00000
 8004ae8:	40240000 	.word	0x40240000
 8004aec:	9b08      	ldr	r3, [sp, #32]
 8004aee:	1e5c      	subs	r4, r3, #1
 8004af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004af2:	42a3      	cmp	r3, r4
 8004af4:	db09      	blt.n	8004b0a <_dtoa_r+0x8ca>
 8004af6:	1b1c      	subs	r4, r3, r4
 8004af8:	9b08      	ldr	r3, [sp, #32]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f6bf af30 	bge.w	8004960 <_dtoa_r+0x720>
 8004b00:	9b04      	ldr	r3, [sp, #16]
 8004b02:	9a08      	ldr	r2, [sp, #32]
 8004b04:	1a9e      	subs	r6, r3, r2
 8004b06:	2300      	movs	r3, #0
 8004b08:	e72b      	b.n	8004962 <_dtoa_r+0x722>
 8004b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b0e:	1ae3      	subs	r3, r4, r3
 8004b10:	441a      	add	r2, r3
 8004b12:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b14:	9e04      	ldr	r6, [sp, #16]
 8004b16:	2400      	movs	r4, #0
 8004b18:	9b08      	ldr	r3, [sp, #32]
 8004b1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b1c:	e721      	b.n	8004962 <_dtoa_r+0x722>
 8004b1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b20:	9e04      	ldr	r6, [sp, #16]
 8004b22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004b24:	e728      	b.n	8004978 <_dtoa_r+0x738>
 8004b26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b2a:	e751      	b.n	80049d0 <_dtoa_r+0x790>
 8004b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b2e:	9903      	ldr	r1, [sp, #12]
 8004b30:	e750      	b.n	80049d4 <_dtoa_r+0x794>
 8004b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b36:	e751      	b.n	80049dc <_dtoa_r+0x79c>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e779      	b.n	8004a30 <_dtoa_r+0x7f0>
 8004b3c:	9b06      	ldr	r3, [sp, #24]
 8004b3e:	e777      	b.n	8004a30 <_dtoa_r+0x7f0>
 8004b40:	2300      	movs	r3, #0
 8004b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b44:	e779      	b.n	8004a3a <_dtoa_r+0x7fa>
 8004b46:	d093      	beq.n	8004a70 <_dtoa_r+0x830>
 8004b48:	9a04      	ldr	r2, [sp, #16]
 8004b4a:	331c      	adds	r3, #28
 8004b4c:	441a      	add	r2, r3
 8004b4e:	9204      	str	r2, [sp, #16]
 8004b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b52:	441e      	add	r6, r3
 8004b54:	441a      	add	r2, r3
 8004b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b58:	e78a      	b.n	8004a70 <_dtoa_r+0x830>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	e7f4      	b.n	8004b48 <_dtoa_r+0x908>
 8004b5e:	9b08      	ldr	r3, [sp, #32]
 8004b60:	46b8      	mov	r8, r7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dc20      	bgt.n	8004ba8 <_dtoa_r+0x968>
 8004b66:	469b      	mov	fp, r3
 8004b68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	dd1e      	ble.n	8004bac <_dtoa_r+0x96c>
 8004b6e:	f1bb 0f00 	cmp.w	fp, #0
 8004b72:	f47f adb1 	bne.w	80046d8 <_dtoa_r+0x498>
 8004b76:	4621      	mov	r1, r4
 8004b78:	465b      	mov	r3, fp
 8004b7a:	2205      	movs	r2, #5
 8004b7c:	4648      	mov	r0, r9
 8004b7e:	f000 fa93 	bl	80050a8 <__multadd>
 8004b82:	4601      	mov	r1, r0
 8004b84:	4604      	mov	r4, r0
 8004b86:	9803      	ldr	r0, [sp, #12]
 8004b88:	f000 fc9e 	bl	80054c8 <__mcmp>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f77f ada3 	ble.w	80046d8 <_dtoa_r+0x498>
 8004b92:	4656      	mov	r6, sl
 8004b94:	2331      	movs	r3, #49	@ 0x31
 8004b96:	f108 0801 	add.w	r8, r8, #1
 8004b9a:	f806 3b01 	strb.w	r3, [r6], #1
 8004b9e:	e59f      	b.n	80046e0 <_dtoa_r+0x4a0>
 8004ba0:	46b8      	mov	r8, r7
 8004ba2:	9c08      	ldr	r4, [sp, #32]
 8004ba4:	4625      	mov	r5, r4
 8004ba6:	e7f4      	b.n	8004b92 <_dtoa_r+0x952>
 8004ba8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8101 	beq.w	8004db6 <_dtoa_r+0xb76>
 8004bb4:	2e00      	cmp	r6, #0
 8004bb6:	dd05      	ble.n	8004bc4 <_dtoa_r+0x984>
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4632      	mov	r2, r6
 8004bbc:	4648      	mov	r0, r9
 8004bbe:	f000 fc17 	bl	80053f0 <__lshift>
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d05c      	beq.n	8004c84 <_dtoa_r+0xa44>
 8004bca:	4648      	mov	r0, r9
 8004bcc:	6869      	ldr	r1, [r5, #4]
 8004bce:	f000 fa09 	bl	8004fe4 <_Balloc>
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	b928      	cbnz	r0, 8004be2 <_dtoa_r+0x9a2>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004bdc:	4b80      	ldr	r3, [pc, #512]	@ (8004de0 <_dtoa_r+0xba0>)
 8004bde:	f7ff bb43 	b.w	8004268 <_dtoa_r+0x28>
 8004be2:	692a      	ldr	r2, [r5, #16]
 8004be4:	f105 010c 	add.w	r1, r5, #12
 8004be8:	3202      	adds	r2, #2
 8004bea:	0092      	lsls	r2, r2, #2
 8004bec:	300c      	adds	r0, #12
 8004bee:	f000 fe2b 	bl	8005848 <memcpy>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4648      	mov	r0, r9
 8004bf8:	f000 fbfa 	bl	80053f0 <__lshift>
 8004bfc:	462f      	mov	r7, r5
 8004bfe:	4605      	mov	r5, r0
 8004c00:	f10a 0301 	add.w	r3, sl, #1
 8004c04:	9304      	str	r3, [sp, #16]
 8004c06:	eb0a 030b 	add.w	r3, sl, fp
 8004c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c0c:	9b06      	ldr	r3, [sp, #24]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c14:	9b04      	ldr	r3, [sp, #16]
 8004c16:	4621      	mov	r1, r4
 8004c18:	9803      	ldr	r0, [sp, #12]
 8004c1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004c1e:	f7ff fa84 	bl	800412a <quorem>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4639      	mov	r1, r7
 8004c26:	3330      	adds	r3, #48	@ 0x30
 8004c28:	9006      	str	r0, [sp, #24]
 8004c2a:	9803      	ldr	r0, [sp, #12]
 8004c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c2e:	f000 fc4b 	bl	80054c8 <__mcmp>
 8004c32:	462a      	mov	r2, r5
 8004c34:	9008      	str	r0, [sp, #32]
 8004c36:	4621      	mov	r1, r4
 8004c38:	4648      	mov	r0, r9
 8004c3a:	f000 fc61 	bl	8005500 <__mdiff>
 8004c3e:	68c2      	ldr	r2, [r0, #12]
 8004c40:	4606      	mov	r6, r0
 8004c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c44:	bb02      	cbnz	r2, 8004c88 <_dtoa_r+0xa48>
 8004c46:	4601      	mov	r1, r0
 8004c48:	9803      	ldr	r0, [sp, #12]
 8004c4a:	f000 fc3d 	bl	80054c8 <__mcmp>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c52:	4631      	mov	r1, r6
 8004c54:	4648      	mov	r0, r9
 8004c56:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004c5a:	f000 fa03 	bl	8005064 <_Bfree>
 8004c5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c62:	9e04      	ldr	r6, [sp, #16]
 8004c64:	ea42 0103 	orr.w	r1, r2, r3
 8004c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c6a:	4319      	orrs	r1, r3
 8004c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c6e:	d10d      	bne.n	8004c8c <_dtoa_r+0xa4c>
 8004c70:	2b39      	cmp	r3, #57	@ 0x39
 8004c72:	d027      	beq.n	8004cc4 <_dtoa_r+0xa84>
 8004c74:	9a08      	ldr	r2, [sp, #32]
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	dd01      	ble.n	8004c7e <_dtoa_r+0xa3e>
 8004c7a:	9b06      	ldr	r3, [sp, #24]
 8004c7c:	3331      	adds	r3, #49	@ 0x31
 8004c7e:	f88b 3000 	strb.w	r3, [fp]
 8004c82:	e52e      	b.n	80046e2 <_dtoa_r+0x4a2>
 8004c84:	4628      	mov	r0, r5
 8004c86:	e7b9      	b.n	8004bfc <_dtoa_r+0x9bc>
 8004c88:	2201      	movs	r2, #1
 8004c8a:	e7e2      	b.n	8004c52 <_dtoa_r+0xa12>
 8004c8c:	9908      	ldr	r1, [sp, #32]
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	db04      	blt.n	8004c9c <_dtoa_r+0xa5c>
 8004c92:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004c94:	4301      	orrs	r1, r0
 8004c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c98:	4301      	orrs	r1, r0
 8004c9a:	d120      	bne.n	8004cde <_dtoa_r+0xa9e>
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	ddee      	ble.n	8004c7e <_dtoa_r+0xa3e>
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	9903      	ldr	r1, [sp, #12]
 8004ca4:	4648      	mov	r0, r9
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	f000 fba2 	bl	80053f0 <__lshift>
 8004cac:	4621      	mov	r1, r4
 8004cae:	9003      	str	r0, [sp, #12]
 8004cb0:	f000 fc0a 	bl	80054c8 <__mcmp>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	dc02      	bgt.n	8004cc0 <_dtoa_r+0xa80>
 8004cba:	d1e0      	bne.n	8004c7e <_dtoa_r+0xa3e>
 8004cbc:	07da      	lsls	r2, r3, #31
 8004cbe:	d5de      	bpl.n	8004c7e <_dtoa_r+0xa3e>
 8004cc0:	2b39      	cmp	r3, #57	@ 0x39
 8004cc2:	d1da      	bne.n	8004c7a <_dtoa_r+0xa3a>
 8004cc4:	2339      	movs	r3, #57	@ 0x39
 8004cc6:	f88b 3000 	strb.w	r3, [fp]
 8004cca:	4633      	mov	r3, r6
 8004ccc:	461e      	mov	r6, r3
 8004cce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	2a39      	cmp	r2, #57	@ 0x39
 8004cd6:	d04e      	beq.n	8004d76 <_dtoa_r+0xb36>
 8004cd8:	3201      	adds	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e501      	b.n	80046e2 <_dtoa_r+0x4a2>
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	dd03      	ble.n	8004cea <_dtoa_r+0xaaa>
 8004ce2:	2b39      	cmp	r3, #57	@ 0x39
 8004ce4:	d0ee      	beq.n	8004cc4 <_dtoa_r+0xa84>
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	e7c9      	b.n	8004c7e <_dtoa_r+0xa3e>
 8004cea:	9a04      	ldr	r2, [sp, #16]
 8004cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004cf2:	428a      	cmp	r2, r1
 8004cf4:	d028      	beq.n	8004d48 <_dtoa_r+0xb08>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	9903      	ldr	r1, [sp, #12]
 8004cfc:	4648      	mov	r0, r9
 8004cfe:	f000 f9d3 	bl	80050a8 <__multadd>
 8004d02:	42af      	cmp	r7, r5
 8004d04:	9003      	str	r0, [sp, #12]
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	f04f 020a 	mov.w	r2, #10
 8004d0e:	4639      	mov	r1, r7
 8004d10:	4648      	mov	r0, r9
 8004d12:	d107      	bne.n	8004d24 <_dtoa_r+0xae4>
 8004d14:	f000 f9c8 	bl	80050a8 <__multadd>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	9b04      	ldr	r3, [sp, #16]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	e777      	b.n	8004c14 <_dtoa_r+0x9d4>
 8004d24:	f000 f9c0 	bl	80050a8 <__multadd>
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4607      	mov	r7, r0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	220a      	movs	r2, #10
 8004d30:	4648      	mov	r0, r9
 8004d32:	f000 f9b9 	bl	80050a8 <__multadd>
 8004d36:	4605      	mov	r5, r0
 8004d38:	e7f0      	b.n	8004d1c <_dtoa_r+0xadc>
 8004d3a:	f1bb 0f00 	cmp.w	fp, #0
 8004d3e:	bfcc      	ite	gt
 8004d40:	465e      	movgt	r6, fp
 8004d42:	2601      	movle	r6, #1
 8004d44:	2700      	movs	r7, #0
 8004d46:	4456      	add	r6, sl
 8004d48:	2201      	movs	r2, #1
 8004d4a:	9903      	ldr	r1, [sp, #12]
 8004d4c:	4648      	mov	r0, r9
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	f000 fb4e 	bl	80053f0 <__lshift>
 8004d54:	4621      	mov	r1, r4
 8004d56:	9003      	str	r0, [sp, #12]
 8004d58:	f000 fbb6 	bl	80054c8 <__mcmp>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	dcb4      	bgt.n	8004cca <_dtoa_r+0xa8a>
 8004d60:	d102      	bne.n	8004d68 <_dtoa_r+0xb28>
 8004d62:	9b04      	ldr	r3, [sp, #16]
 8004d64:	07db      	lsls	r3, r3, #31
 8004d66:	d4b0      	bmi.n	8004cca <_dtoa_r+0xa8a>
 8004d68:	4633      	mov	r3, r6
 8004d6a:	461e      	mov	r6, r3
 8004d6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d70:	2a30      	cmp	r2, #48	@ 0x30
 8004d72:	d0fa      	beq.n	8004d6a <_dtoa_r+0xb2a>
 8004d74:	e4b5      	b.n	80046e2 <_dtoa_r+0x4a2>
 8004d76:	459a      	cmp	sl, r3
 8004d78:	d1a8      	bne.n	8004ccc <_dtoa_r+0xa8c>
 8004d7a:	2331      	movs	r3, #49	@ 0x31
 8004d7c:	f108 0801 	add.w	r8, r8, #1
 8004d80:	f88a 3000 	strb.w	r3, [sl]
 8004d84:	e4ad      	b.n	80046e2 <_dtoa_r+0x4a2>
 8004d86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004de4 <_dtoa_r+0xba4>
 8004d8c:	b11b      	cbz	r3, 8004d96 <_dtoa_r+0xb56>
 8004d8e:	f10a 0308 	add.w	r3, sl, #8
 8004d92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4650      	mov	r0, sl
 8004d98:	b017      	add	sp, #92	@ 0x5c
 8004d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f77f ae2e 	ble.w	8004a02 <_dtoa_r+0x7c2>
 8004da6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004daa:	2001      	movs	r0, #1
 8004dac:	e64d      	b.n	8004a4a <_dtoa_r+0x80a>
 8004dae:	f1bb 0f00 	cmp.w	fp, #0
 8004db2:	f77f aed9 	ble.w	8004b68 <_dtoa_r+0x928>
 8004db6:	4656      	mov	r6, sl
 8004db8:	4621      	mov	r1, r4
 8004dba:	9803      	ldr	r0, [sp, #12]
 8004dbc:	f7ff f9b5 	bl	800412a <quorem>
 8004dc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8004dc8:	eba6 020a 	sub.w	r2, r6, sl
 8004dcc:	4593      	cmp	fp, r2
 8004dce:	ddb4      	ble.n	8004d3a <_dtoa_r+0xafa>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	9903      	ldr	r1, [sp, #12]
 8004dd8:	f000 f966 	bl	80050a8 <__multadd>
 8004ddc:	9003      	str	r0, [sp, #12]
 8004dde:	e7eb      	b.n	8004db8 <_dtoa_r+0xb78>
 8004de0:	08005fb2 	.word	0x08005fb2
 8004de4:	08005f36 	.word	0x08005f36

08004de8 <_free_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4605      	mov	r5, r0
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d040      	beq.n	8004e72 <_free_r+0x8a>
 8004df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df4:	1f0c      	subs	r4, r1, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bfb8      	it	lt
 8004dfa:	18e4      	addlt	r4, r4, r3
 8004dfc:	f000 f8e6 	bl	8004fcc <__malloc_lock>
 8004e00:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <_free_r+0x8c>)
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	b933      	cbnz	r3, 8004e14 <_free_r+0x2c>
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	6014      	str	r4, [r2, #0]
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e10:	f000 b8e2 	b.w	8004fd8 <__malloc_unlock>
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d908      	bls.n	8004e2a <_free_r+0x42>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	1821      	adds	r1, r4, r0
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	bf01      	itttt	eq
 8004e20:	6819      	ldreq	r1, [r3, #0]
 8004e22:	685b      	ldreq	r3, [r3, #4]
 8004e24:	1809      	addeq	r1, r1, r0
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	e7ed      	b.n	8004e06 <_free_r+0x1e>
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	b10b      	cbz	r3, 8004e34 <_free_r+0x4c>
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	d9fa      	bls.n	8004e2a <_free_r+0x42>
 8004e34:	6811      	ldr	r1, [r2, #0]
 8004e36:	1850      	adds	r0, r2, r1
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d10b      	bne.n	8004e54 <_free_r+0x6c>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	4401      	add	r1, r0
 8004e40:	1850      	adds	r0, r2, r1
 8004e42:	4283      	cmp	r3, r0
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	d1e0      	bne.n	8004e0a <_free_r+0x22>
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4408      	add	r0, r1
 8004e4e:	6010      	str	r0, [r2, #0]
 8004e50:	6053      	str	r3, [r2, #4]
 8004e52:	e7da      	b.n	8004e0a <_free_r+0x22>
 8004e54:	d902      	bls.n	8004e5c <_free_r+0x74>
 8004e56:	230c      	movs	r3, #12
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	e7d6      	b.n	8004e0a <_free_r+0x22>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	1821      	adds	r1, r4, r0
 8004e60:	428b      	cmp	r3, r1
 8004e62:	bf01      	itttt	eq
 8004e64:	6819      	ldreq	r1, [r3, #0]
 8004e66:	685b      	ldreq	r3, [r3, #4]
 8004e68:	1809      	addeq	r1, r1, r0
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	6054      	str	r4, [r2, #4]
 8004e70:	e7cb      	b.n	8004e0a <_free_r+0x22>
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	2000044c 	.word	0x2000044c

08004e78 <malloc>:
 8004e78:	4b02      	ldr	r3, [pc, #8]	@ (8004e84 <malloc+0xc>)
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	f000 b825 	b.w	8004ecc <_malloc_r>
 8004e82:	bf00      	nop
 8004e84:	20000020 	.word	0x20000020

08004e88 <sbrk_aligned>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec8 <sbrk_aligned+0x40>)
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	6831      	ldr	r1, [r6, #0]
 8004e90:	4605      	mov	r5, r0
 8004e92:	b911      	cbnz	r1, 8004e9a <sbrk_aligned+0x12>
 8004e94:	f000 fcc8 	bl	8005828 <_sbrk_r>
 8004e98:	6030      	str	r0, [r6, #0]
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fcc3 	bl	8005828 <_sbrk_r>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d103      	bne.n	8004eae <sbrk_aligned+0x26>
 8004ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8004eaa:	4620      	mov	r0, r4
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	1cc4      	adds	r4, r0, #3
 8004eb0:	f024 0403 	bic.w	r4, r4, #3
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d0f8      	beq.n	8004eaa <sbrk_aligned+0x22>
 8004eb8:	1a21      	subs	r1, r4, r0
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 fcb4 	bl	8005828 <_sbrk_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1f2      	bne.n	8004eaa <sbrk_aligned+0x22>
 8004ec4:	e7ef      	b.n	8004ea6 <sbrk_aligned+0x1e>
 8004ec6:	bf00      	nop
 8004ec8:	20000448 	.word	0x20000448

08004ecc <_malloc_r>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	1ccd      	adds	r5, r1, #3
 8004ed2:	f025 0503 	bic.w	r5, r5, #3
 8004ed6:	3508      	adds	r5, #8
 8004ed8:	2d0c      	cmp	r5, #12
 8004eda:	bf38      	it	cc
 8004edc:	250c      	movcc	r5, #12
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	db01      	blt.n	8004ee8 <_malloc_r+0x1c>
 8004ee4:	42a9      	cmp	r1, r5
 8004ee6:	d904      	bls.n	8004ef2 <_malloc_r+0x26>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	2000      	movs	r0, #0
 8004eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc8 <_malloc_r+0xfc>
 8004ef6:	f000 f869 	bl	8004fcc <__malloc_lock>
 8004efa:	f8d8 3000 	ldr.w	r3, [r8]
 8004efe:	461c      	mov	r4, r3
 8004f00:	bb44      	cbnz	r4, 8004f54 <_malloc_r+0x88>
 8004f02:	4629      	mov	r1, r5
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ffbf 	bl	8004e88 <sbrk_aligned>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	d158      	bne.n	8004fc2 <_malloc_r+0xf6>
 8004f10:	f8d8 4000 	ldr.w	r4, [r8]
 8004f14:	4627      	mov	r7, r4
 8004f16:	2f00      	cmp	r7, #0
 8004f18:	d143      	bne.n	8004fa2 <_malloc_r+0xd6>
 8004f1a:	2c00      	cmp	r4, #0
 8004f1c:	d04b      	beq.n	8004fb6 <_malloc_r+0xea>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	4639      	mov	r1, r7
 8004f22:	4630      	mov	r0, r6
 8004f24:	eb04 0903 	add.w	r9, r4, r3
 8004f28:	f000 fc7e 	bl	8005828 <_sbrk_r>
 8004f2c:	4581      	cmp	r9, r0
 8004f2e:	d142      	bne.n	8004fb6 <_malloc_r+0xea>
 8004f30:	6821      	ldr	r1, [r4, #0]
 8004f32:	4630      	mov	r0, r6
 8004f34:	1a6d      	subs	r5, r5, r1
 8004f36:	4629      	mov	r1, r5
 8004f38:	f7ff ffa6 	bl	8004e88 <sbrk_aligned>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d03a      	beq.n	8004fb6 <_malloc_r+0xea>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	442b      	add	r3, r5
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	f8d8 3000 	ldr.w	r3, [r8]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	bb62      	cbnz	r2, 8004fa8 <_malloc_r+0xdc>
 8004f4e:	f8c8 7000 	str.w	r7, [r8]
 8004f52:	e00f      	b.n	8004f74 <_malloc_r+0xa8>
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	1b52      	subs	r2, r2, r5
 8004f58:	d420      	bmi.n	8004f9c <_malloc_r+0xd0>
 8004f5a:	2a0b      	cmp	r2, #11
 8004f5c:	d917      	bls.n	8004f8e <_malloc_r+0xc2>
 8004f5e:	1961      	adds	r1, r4, r5
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	6025      	str	r5, [r4, #0]
 8004f64:	bf18      	it	ne
 8004f66:	6059      	strne	r1, [r3, #4]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	bf08      	it	eq
 8004f6c:	f8c8 1000 	streq.w	r1, [r8]
 8004f70:	5162      	str	r2, [r4, r5]
 8004f72:	604b      	str	r3, [r1, #4]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 f82f 	bl	8004fd8 <__malloc_unlock>
 8004f7a:	f104 000b 	add.w	r0, r4, #11
 8004f7e:	1d23      	adds	r3, r4, #4
 8004f80:	f020 0007 	bic.w	r0, r0, #7
 8004f84:	1ac2      	subs	r2, r0, r3
 8004f86:	bf1c      	itt	ne
 8004f88:	1a1b      	subne	r3, r3, r0
 8004f8a:	50a3      	strne	r3, [r4, r2]
 8004f8c:	e7af      	b.n	8004eee <_malloc_r+0x22>
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	bf0c      	ite	eq
 8004f94:	f8c8 2000 	streq.w	r2, [r8]
 8004f98:	605a      	strne	r2, [r3, #4]
 8004f9a:	e7eb      	b.n	8004f74 <_malloc_r+0xa8>
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	6864      	ldr	r4, [r4, #4]
 8004fa0:	e7ae      	b.n	8004f00 <_malloc_r+0x34>
 8004fa2:	463c      	mov	r4, r7
 8004fa4:	687f      	ldr	r7, [r7, #4]
 8004fa6:	e7b6      	b.n	8004f16 <_malloc_r+0x4a>
 8004fa8:	461a      	mov	r2, r3
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d1fb      	bne.n	8004fa8 <_malloc_r+0xdc>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6053      	str	r3, [r2, #4]
 8004fb4:	e7de      	b.n	8004f74 <_malloc_r+0xa8>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	4630      	mov	r0, r6
 8004fba:	6033      	str	r3, [r6, #0]
 8004fbc:	f000 f80c 	bl	8004fd8 <__malloc_unlock>
 8004fc0:	e794      	b.n	8004eec <_malloc_r+0x20>
 8004fc2:	6005      	str	r5, [r0, #0]
 8004fc4:	e7d6      	b.n	8004f74 <_malloc_r+0xa8>
 8004fc6:	bf00      	nop
 8004fc8:	2000044c 	.word	0x2000044c

08004fcc <__malloc_lock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	@ (8004fd4 <__malloc_lock+0x8>)
 8004fce:	f7ff b89c 	b.w	800410a <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000444 	.word	0x20000444

08004fd8 <__malloc_unlock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	@ (8004fe0 <__malloc_unlock+0x8>)
 8004fda:	f7ff b897 	b.w	800410c <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20000444 	.word	0x20000444

08004fe4 <_Balloc>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	69c6      	ldr	r6, [r0, #28]
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	b976      	cbnz	r6, 800500c <_Balloc+0x28>
 8004fee:	2010      	movs	r0, #16
 8004ff0:	f7ff ff42 	bl	8004e78 <malloc>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	61e0      	str	r0, [r4, #28]
 8004ff8:	b920      	cbnz	r0, 8005004 <_Balloc+0x20>
 8004ffa:	216b      	movs	r1, #107	@ 0x6b
 8004ffc:	4b17      	ldr	r3, [pc, #92]	@ (800505c <_Balloc+0x78>)
 8004ffe:	4818      	ldr	r0, [pc, #96]	@ (8005060 <_Balloc+0x7c>)
 8005000:	f000 fc30 	bl	8005864 <__assert_func>
 8005004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005008:	6006      	str	r6, [r0, #0]
 800500a:	60c6      	str	r6, [r0, #12]
 800500c:	69e6      	ldr	r6, [r4, #28]
 800500e:	68f3      	ldr	r3, [r6, #12]
 8005010:	b183      	cbz	r3, 8005034 <_Balloc+0x50>
 8005012:	69e3      	ldr	r3, [r4, #28]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800501a:	b9b8      	cbnz	r0, 800504c <_Balloc+0x68>
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f605 	lsl.w	r6, r1, r5
 8005022:	1d72      	adds	r2, r6, #5
 8005024:	4620      	mov	r0, r4
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	f000 fc3a 	bl	80058a0 <_calloc_r>
 800502c:	b160      	cbz	r0, 8005048 <_Balloc+0x64>
 800502e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005032:	e00e      	b.n	8005052 <_Balloc+0x6e>
 8005034:	2221      	movs	r2, #33	@ 0x21
 8005036:	2104      	movs	r1, #4
 8005038:	4620      	mov	r0, r4
 800503a:	f000 fc31 	bl	80058a0 <_calloc_r>
 800503e:	69e3      	ldr	r3, [r4, #28]
 8005040:	60f0      	str	r0, [r6, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e4      	bne.n	8005012 <_Balloc+0x2e>
 8005048:	2000      	movs	r0, #0
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	6802      	ldr	r2, [r0, #0]
 800504e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005052:	2300      	movs	r3, #0
 8005054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005058:	e7f7      	b.n	800504a <_Balloc+0x66>
 800505a:	bf00      	nop
 800505c:	08005f43 	.word	0x08005f43
 8005060:	08005fc3 	.word	0x08005fc3

08005064 <_Bfree>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	69c6      	ldr	r6, [r0, #28]
 8005068:	4605      	mov	r5, r0
 800506a:	460c      	mov	r4, r1
 800506c:	b976      	cbnz	r6, 800508c <_Bfree+0x28>
 800506e:	2010      	movs	r0, #16
 8005070:	f7ff ff02 	bl	8004e78 <malloc>
 8005074:	4602      	mov	r2, r0
 8005076:	61e8      	str	r0, [r5, #28]
 8005078:	b920      	cbnz	r0, 8005084 <_Bfree+0x20>
 800507a:	218f      	movs	r1, #143	@ 0x8f
 800507c:	4b08      	ldr	r3, [pc, #32]	@ (80050a0 <_Bfree+0x3c>)
 800507e:	4809      	ldr	r0, [pc, #36]	@ (80050a4 <_Bfree+0x40>)
 8005080:	f000 fbf0 	bl	8005864 <__assert_func>
 8005084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005088:	6006      	str	r6, [r0, #0]
 800508a:	60c6      	str	r6, [r0, #12]
 800508c:	b13c      	cbz	r4, 800509e <_Bfree+0x3a>
 800508e:	69eb      	ldr	r3, [r5, #28]
 8005090:	6862      	ldr	r2, [r4, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005098:	6021      	str	r1, [r4, #0]
 800509a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	08005f43 	.word	0x08005f43
 80050a4:	08005fc3 	.word	0x08005fc3

080050a8 <__multadd>:
 80050a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4607      	mov	r7, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	461e      	mov	r6, r3
 80050b2:	2000      	movs	r0, #0
 80050b4:	690d      	ldr	r5, [r1, #16]
 80050b6:	f101 0c14 	add.w	ip, r1, #20
 80050ba:	f8dc 3000 	ldr.w	r3, [ip]
 80050be:	3001      	adds	r0, #1
 80050c0:	b299      	uxth	r1, r3
 80050c2:	fb02 6101 	mla	r1, r2, r1, r6
 80050c6:	0c1e      	lsrs	r6, r3, #16
 80050c8:	0c0b      	lsrs	r3, r1, #16
 80050ca:	fb02 3306 	mla	r3, r2, r6, r3
 80050ce:	b289      	uxth	r1, r1
 80050d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050d4:	4285      	cmp	r5, r0
 80050d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050da:	f84c 1b04 	str.w	r1, [ip], #4
 80050de:	dcec      	bgt.n	80050ba <__multadd+0x12>
 80050e0:	b30e      	cbz	r6, 8005126 <__multadd+0x7e>
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dc19      	bgt.n	800511c <__multadd+0x74>
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	4638      	mov	r0, r7
 80050ec:	3101      	adds	r1, #1
 80050ee:	f7ff ff79 	bl	8004fe4 <_Balloc>
 80050f2:	4680      	mov	r8, r0
 80050f4:	b928      	cbnz	r0, 8005102 <__multadd+0x5a>
 80050f6:	4602      	mov	r2, r0
 80050f8:	21ba      	movs	r1, #186	@ 0xba
 80050fa:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <__multadd+0x84>)
 80050fc:	480c      	ldr	r0, [pc, #48]	@ (8005130 <__multadd+0x88>)
 80050fe:	f000 fbb1 	bl	8005864 <__assert_func>
 8005102:	6922      	ldr	r2, [r4, #16]
 8005104:	f104 010c 	add.w	r1, r4, #12
 8005108:	3202      	adds	r2, #2
 800510a:	0092      	lsls	r2, r2, #2
 800510c:	300c      	adds	r0, #12
 800510e:	f000 fb9b 	bl	8005848 <memcpy>
 8005112:	4621      	mov	r1, r4
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff ffa5 	bl	8005064 <_Bfree>
 800511a:	4644      	mov	r4, r8
 800511c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005120:	3501      	adds	r5, #1
 8005122:	615e      	str	r6, [r3, #20]
 8005124:	6125      	str	r5, [r4, #16]
 8005126:	4620      	mov	r0, r4
 8005128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512c:	08005fb2 	.word	0x08005fb2
 8005130:	08005fc3 	.word	0x08005fc3

08005134 <__hi0bits>:
 8005134:	4603      	mov	r3, r0
 8005136:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800513a:	bf3a      	itte	cc
 800513c:	0403      	lslcc	r3, r0, #16
 800513e:	2010      	movcc	r0, #16
 8005140:	2000      	movcs	r0, #0
 8005142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005146:	bf3c      	itt	cc
 8005148:	021b      	lslcc	r3, r3, #8
 800514a:	3008      	addcc	r0, #8
 800514c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005150:	bf3c      	itt	cc
 8005152:	011b      	lslcc	r3, r3, #4
 8005154:	3004      	addcc	r0, #4
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515a:	bf3c      	itt	cc
 800515c:	009b      	lslcc	r3, r3, #2
 800515e:	3002      	addcc	r0, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	db05      	blt.n	8005170 <__hi0bits+0x3c>
 8005164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005168:	f100 0001 	add.w	r0, r0, #1
 800516c:	bf08      	it	eq
 800516e:	2020      	moveq	r0, #32
 8005170:	4770      	bx	lr

08005172 <__lo0bits>:
 8005172:	6803      	ldr	r3, [r0, #0]
 8005174:	4602      	mov	r2, r0
 8005176:	f013 0007 	ands.w	r0, r3, #7
 800517a:	d00b      	beq.n	8005194 <__lo0bits+0x22>
 800517c:	07d9      	lsls	r1, r3, #31
 800517e:	d421      	bmi.n	80051c4 <__lo0bits+0x52>
 8005180:	0798      	lsls	r0, r3, #30
 8005182:	bf49      	itett	mi
 8005184:	085b      	lsrmi	r3, r3, #1
 8005186:	089b      	lsrpl	r3, r3, #2
 8005188:	2001      	movmi	r0, #1
 800518a:	6013      	strmi	r3, [r2, #0]
 800518c:	bf5c      	itt	pl
 800518e:	2002      	movpl	r0, #2
 8005190:	6013      	strpl	r3, [r2, #0]
 8005192:	4770      	bx	lr
 8005194:	b299      	uxth	r1, r3
 8005196:	b909      	cbnz	r1, 800519c <__lo0bits+0x2a>
 8005198:	2010      	movs	r0, #16
 800519a:	0c1b      	lsrs	r3, r3, #16
 800519c:	b2d9      	uxtb	r1, r3
 800519e:	b909      	cbnz	r1, 80051a4 <__lo0bits+0x32>
 80051a0:	3008      	adds	r0, #8
 80051a2:	0a1b      	lsrs	r3, r3, #8
 80051a4:	0719      	lsls	r1, r3, #28
 80051a6:	bf04      	itt	eq
 80051a8:	091b      	lsreq	r3, r3, #4
 80051aa:	3004      	addeq	r0, #4
 80051ac:	0799      	lsls	r1, r3, #30
 80051ae:	bf04      	itt	eq
 80051b0:	089b      	lsreq	r3, r3, #2
 80051b2:	3002      	addeq	r0, #2
 80051b4:	07d9      	lsls	r1, r3, #31
 80051b6:	d403      	bmi.n	80051c0 <__lo0bits+0x4e>
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	f100 0001 	add.w	r0, r0, #1
 80051be:	d003      	beq.n	80051c8 <__lo0bits+0x56>
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4770      	bx	lr
 80051c4:	2000      	movs	r0, #0
 80051c6:	4770      	bx	lr
 80051c8:	2020      	movs	r0, #32
 80051ca:	4770      	bx	lr

080051cc <__i2b>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	460c      	mov	r4, r1
 80051d0:	2101      	movs	r1, #1
 80051d2:	f7ff ff07 	bl	8004fe4 <_Balloc>
 80051d6:	4602      	mov	r2, r0
 80051d8:	b928      	cbnz	r0, 80051e6 <__i2b+0x1a>
 80051da:	f240 1145 	movw	r1, #325	@ 0x145
 80051de:	4b04      	ldr	r3, [pc, #16]	@ (80051f0 <__i2b+0x24>)
 80051e0:	4804      	ldr	r0, [pc, #16]	@ (80051f4 <__i2b+0x28>)
 80051e2:	f000 fb3f 	bl	8005864 <__assert_func>
 80051e6:	2301      	movs	r3, #1
 80051e8:	6144      	str	r4, [r0, #20]
 80051ea:	6103      	str	r3, [r0, #16]
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	08005fb2 	.word	0x08005fb2
 80051f4:	08005fc3 	.word	0x08005fc3

080051f8 <__multiply>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	4617      	mov	r7, r2
 80051fe:	690a      	ldr	r2, [r1, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4689      	mov	r9, r1
 8005204:	429a      	cmp	r2, r3
 8005206:	bfa2      	ittt	ge
 8005208:	463b      	movge	r3, r7
 800520a:	460f      	movge	r7, r1
 800520c:	4699      	movge	r9, r3
 800520e:	693d      	ldr	r5, [r7, #16]
 8005210:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	eb05 060a 	add.w	r6, r5, sl
 800521c:	42b3      	cmp	r3, r6
 800521e:	b085      	sub	sp, #20
 8005220:	bfb8      	it	lt
 8005222:	3101      	addlt	r1, #1
 8005224:	f7ff fede 	bl	8004fe4 <_Balloc>
 8005228:	b930      	cbnz	r0, 8005238 <__multiply+0x40>
 800522a:	4602      	mov	r2, r0
 800522c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005230:	4b40      	ldr	r3, [pc, #256]	@ (8005334 <__multiply+0x13c>)
 8005232:	4841      	ldr	r0, [pc, #260]	@ (8005338 <__multiply+0x140>)
 8005234:	f000 fb16 	bl	8005864 <__assert_func>
 8005238:	f100 0414 	add.w	r4, r0, #20
 800523c:	4623      	mov	r3, r4
 800523e:	2200      	movs	r2, #0
 8005240:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005244:	4573      	cmp	r3, lr
 8005246:	d320      	bcc.n	800528a <__multiply+0x92>
 8005248:	f107 0814 	add.w	r8, r7, #20
 800524c:	f109 0114 	add.w	r1, r9, #20
 8005250:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005254:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005258:	9302      	str	r3, [sp, #8]
 800525a:	1beb      	subs	r3, r5, r7
 800525c:	3b15      	subs	r3, #21
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	3304      	adds	r3, #4
 8005264:	3715      	adds	r7, #21
 8005266:	42bd      	cmp	r5, r7
 8005268:	bf38      	it	cc
 800526a:	2304      	movcc	r3, #4
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	9b02      	ldr	r3, [sp, #8]
 8005270:	9103      	str	r1, [sp, #12]
 8005272:	428b      	cmp	r3, r1
 8005274:	d80c      	bhi.n	8005290 <__multiply+0x98>
 8005276:	2e00      	cmp	r6, #0
 8005278:	dd03      	ble.n	8005282 <__multiply+0x8a>
 800527a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800527e:	2b00      	cmp	r3, #0
 8005280:	d055      	beq.n	800532e <__multiply+0x136>
 8005282:	6106      	str	r6, [r0, #16]
 8005284:	b005      	add	sp, #20
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528a:	f843 2b04 	str.w	r2, [r3], #4
 800528e:	e7d9      	b.n	8005244 <__multiply+0x4c>
 8005290:	f8b1 a000 	ldrh.w	sl, [r1]
 8005294:	f1ba 0f00 	cmp.w	sl, #0
 8005298:	d01f      	beq.n	80052da <__multiply+0xe2>
 800529a:	46c4      	mov	ip, r8
 800529c:	46a1      	mov	r9, r4
 800529e:	2700      	movs	r7, #0
 80052a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80052a4:	f8d9 3000 	ldr.w	r3, [r9]
 80052a8:	fa1f fb82 	uxth.w	fp, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	fb0a 330b 	mla	r3, sl, fp, r3
 80052b2:	443b      	add	r3, r7
 80052b4:	f8d9 7000 	ldr.w	r7, [r9]
 80052b8:	0c12      	lsrs	r2, r2, #16
 80052ba:	0c3f      	lsrs	r7, r7, #16
 80052bc:	fb0a 7202 	mla	r2, sl, r2, r7
 80052c0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ca:	4565      	cmp	r5, ip
 80052cc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80052d0:	f849 3b04 	str.w	r3, [r9], #4
 80052d4:	d8e4      	bhi.n	80052a0 <__multiply+0xa8>
 80052d6:	9b01      	ldr	r3, [sp, #4]
 80052d8:	50e7      	str	r7, [r4, r3]
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	3104      	adds	r1, #4
 80052de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80052e2:	f1b9 0f00 	cmp.w	r9, #0
 80052e6:	d020      	beq.n	800532a <__multiply+0x132>
 80052e8:	4647      	mov	r7, r8
 80052ea:	46a4      	mov	ip, r4
 80052ec:	f04f 0a00 	mov.w	sl, #0
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	f8b7 b000 	ldrh.w	fp, [r7]
 80052f6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	fb09 220b 	mla	r2, r9, fp, r2
 8005300:	4452      	add	r2, sl
 8005302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005306:	f84c 3b04 	str.w	r3, [ip], #4
 800530a:	f857 3b04 	ldr.w	r3, [r7], #4
 800530e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005312:	f8bc 3000 	ldrh.w	r3, [ip]
 8005316:	42bd      	cmp	r5, r7
 8005318:	fb09 330a 	mla	r3, r9, sl, r3
 800531c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005324:	d8e5      	bhi.n	80052f2 <__multiply+0xfa>
 8005326:	9a01      	ldr	r2, [sp, #4]
 8005328:	50a3      	str	r3, [r4, r2]
 800532a:	3404      	adds	r4, #4
 800532c:	e79f      	b.n	800526e <__multiply+0x76>
 800532e:	3e01      	subs	r6, #1
 8005330:	e7a1      	b.n	8005276 <__multiply+0x7e>
 8005332:	bf00      	nop
 8005334:	08005fb2 	.word	0x08005fb2
 8005338:	08005fc3 	.word	0x08005fc3

0800533c <__pow5mult>:
 800533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005340:	4615      	mov	r5, r2
 8005342:	f012 0203 	ands.w	r2, r2, #3
 8005346:	4607      	mov	r7, r0
 8005348:	460e      	mov	r6, r1
 800534a:	d007      	beq.n	800535c <__pow5mult+0x20>
 800534c:	4c25      	ldr	r4, [pc, #148]	@ (80053e4 <__pow5mult+0xa8>)
 800534e:	3a01      	subs	r2, #1
 8005350:	2300      	movs	r3, #0
 8005352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005356:	f7ff fea7 	bl	80050a8 <__multadd>
 800535a:	4606      	mov	r6, r0
 800535c:	10ad      	asrs	r5, r5, #2
 800535e:	d03d      	beq.n	80053dc <__pow5mult+0xa0>
 8005360:	69fc      	ldr	r4, [r7, #28]
 8005362:	b97c      	cbnz	r4, 8005384 <__pow5mult+0x48>
 8005364:	2010      	movs	r0, #16
 8005366:	f7ff fd87 	bl	8004e78 <malloc>
 800536a:	4602      	mov	r2, r0
 800536c:	61f8      	str	r0, [r7, #28]
 800536e:	b928      	cbnz	r0, 800537c <__pow5mult+0x40>
 8005370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005374:	4b1c      	ldr	r3, [pc, #112]	@ (80053e8 <__pow5mult+0xac>)
 8005376:	481d      	ldr	r0, [pc, #116]	@ (80053ec <__pow5mult+0xb0>)
 8005378:	f000 fa74 	bl	8005864 <__assert_func>
 800537c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005380:	6004      	str	r4, [r0, #0]
 8005382:	60c4      	str	r4, [r0, #12]
 8005384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800538c:	b94c      	cbnz	r4, 80053a2 <__pow5mult+0x66>
 800538e:	f240 2171 	movw	r1, #625	@ 0x271
 8005392:	4638      	mov	r0, r7
 8005394:	f7ff ff1a 	bl	80051cc <__i2b>
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	f8c8 0008 	str.w	r0, [r8, #8]
 80053a0:	6003      	str	r3, [r0, #0]
 80053a2:	f04f 0900 	mov.w	r9, #0
 80053a6:	07eb      	lsls	r3, r5, #31
 80053a8:	d50a      	bpl.n	80053c0 <__pow5mult+0x84>
 80053aa:	4631      	mov	r1, r6
 80053ac:	4622      	mov	r2, r4
 80053ae:	4638      	mov	r0, r7
 80053b0:	f7ff ff22 	bl	80051f8 <__multiply>
 80053b4:	4680      	mov	r8, r0
 80053b6:	4631      	mov	r1, r6
 80053b8:	4638      	mov	r0, r7
 80053ba:	f7ff fe53 	bl	8005064 <_Bfree>
 80053be:	4646      	mov	r6, r8
 80053c0:	106d      	asrs	r5, r5, #1
 80053c2:	d00b      	beq.n	80053dc <__pow5mult+0xa0>
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	b938      	cbnz	r0, 80053d8 <__pow5mult+0x9c>
 80053c8:	4622      	mov	r2, r4
 80053ca:	4621      	mov	r1, r4
 80053cc:	4638      	mov	r0, r7
 80053ce:	f7ff ff13 	bl	80051f8 <__multiply>
 80053d2:	6020      	str	r0, [r4, #0]
 80053d4:	f8c0 9000 	str.w	r9, [r0]
 80053d8:	4604      	mov	r4, r0
 80053da:	e7e4      	b.n	80053a6 <__pow5mult+0x6a>
 80053dc:	4630      	mov	r0, r6
 80053de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e2:	bf00      	nop
 80053e4:	08006074 	.word	0x08006074
 80053e8:	08005f43 	.word	0x08005f43
 80053ec:	08005fc3 	.word	0x08005fc3

080053f0 <__lshift>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	460c      	mov	r4, r1
 80053f6:	4607      	mov	r7, r0
 80053f8:	4691      	mov	r9, r2
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6849      	ldr	r1, [r1, #4]
 80053fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005408:	f108 0601 	add.w	r6, r8, #1
 800540c:	42b3      	cmp	r3, r6
 800540e:	db0b      	blt.n	8005428 <__lshift+0x38>
 8005410:	4638      	mov	r0, r7
 8005412:	f7ff fde7 	bl	8004fe4 <_Balloc>
 8005416:	4605      	mov	r5, r0
 8005418:	b948      	cbnz	r0, 800542e <__lshift+0x3e>
 800541a:	4602      	mov	r2, r0
 800541c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005420:	4b27      	ldr	r3, [pc, #156]	@ (80054c0 <__lshift+0xd0>)
 8005422:	4828      	ldr	r0, [pc, #160]	@ (80054c4 <__lshift+0xd4>)
 8005424:	f000 fa1e 	bl	8005864 <__assert_func>
 8005428:	3101      	adds	r1, #1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	e7ee      	b.n	800540c <__lshift+0x1c>
 800542e:	2300      	movs	r3, #0
 8005430:	f100 0114 	add.w	r1, r0, #20
 8005434:	f100 0210 	add.w	r2, r0, #16
 8005438:	4618      	mov	r0, r3
 800543a:	4553      	cmp	r3, sl
 800543c:	db33      	blt.n	80054a6 <__lshift+0xb6>
 800543e:	6920      	ldr	r0, [r4, #16]
 8005440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005444:	f104 0314 	add.w	r3, r4, #20
 8005448:	f019 091f 	ands.w	r9, r9, #31
 800544c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005454:	d02b      	beq.n	80054ae <__lshift+0xbe>
 8005456:	468a      	mov	sl, r1
 8005458:	2200      	movs	r2, #0
 800545a:	f1c9 0e20 	rsb	lr, r9, #32
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	fa00 f009 	lsl.w	r0, r0, r9
 8005464:	4310      	orrs	r0, r2
 8005466:	f84a 0b04 	str.w	r0, [sl], #4
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	459c      	cmp	ip, r3
 8005470:	fa22 f20e 	lsr.w	r2, r2, lr
 8005474:	d8f3      	bhi.n	800545e <__lshift+0x6e>
 8005476:	ebac 0304 	sub.w	r3, ip, r4
 800547a:	3b15      	subs	r3, #21
 800547c:	f023 0303 	bic.w	r3, r3, #3
 8005480:	3304      	adds	r3, #4
 8005482:	f104 0015 	add.w	r0, r4, #21
 8005486:	4560      	cmp	r0, ip
 8005488:	bf88      	it	hi
 800548a:	2304      	movhi	r3, #4
 800548c:	50ca      	str	r2, [r1, r3]
 800548e:	b10a      	cbz	r2, 8005494 <__lshift+0xa4>
 8005490:	f108 0602 	add.w	r6, r8, #2
 8005494:	3e01      	subs	r6, #1
 8005496:	4638      	mov	r0, r7
 8005498:	4621      	mov	r1, r4
 800549a:	612e      	str	r6, [r5, #16]
 800549c:	f7ff fde2 	bl	8005064 <_Bfree>
 80054a0:	4628      	mov	r0, r5
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80054aa:	3301      	adds	r3, #1
 80054ac:	e7c5      	b.n	800543a <__lshift+0x4a>
 80054ae:	3904      	subs	r1, #4
 80054b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b4:	459c      	cmp	ip, r3
 80054b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80054ba:	d8f9      	bhi.n	80054b0 <__lshift+0xc0>
 80054bc:	e7ea      	b.n	8005494 <__lshift+0xa4>
 80054be:	bf00      	nop
 80054c0:	08005fb2 	.word	0x08005fb2
 80054c4:	08005fc3 	.word	0x08005fc3

080054c8 <__mcmp>:
 80054c8:	4603      	mov	r3, r0
 80054ca:	690a      	ldr	r2, [r1, #16]
 80054cc:	6900      	ldr	r0, [r0, #16]
 80054ce:	b530      	push	{r4, r5, lr}
 80054d0:	1a80      	subs	r0, r0, r2
 80054d2:	d10e      	bne.n	80054f2 <__mcmp+0x2a>
 80054d4:	3314      	adds	r3, #20
 80054d6:	3114      	adds	r1, #20
 80054d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80054dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80054e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80054e8:	4295      	cmp	r5, r2
 80054ea:	d003      	beq.n	80054f4 <__mcmp+0x2c>
 80054ec:	d205      	bcs.n	80054fa <__mcmp+0x32>
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295
 80054f2:	bd30      	pop	{r4, r5, pc}
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d3f3      	bcc.n	80054e0 <__mcmp+0x18>
 80054f8:	e7fb      	b.n	80054f2 <__mcmp+0x2a>
 80054fa:	2001      	movs	r0, #1
 80054fc:	e7f9      	b.n	80054f2 <__mcmp+0x2a>
	...

08005500 <__mdiff>:
 8005500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	4689      	mov	r9, r1
 8005506:	4606      	mov	r6, r0
 8005508:	4611      	mov	r1, r2
 800550a:	4648      	mov	r0, r9
 800550c:	4614      	mov	r4, r2
 800550e:	f7ff ffdb 	bl	80054c8 <__mcmp>
 8005512:	1e05      	subs	r5, r0, #0
 8005514:	d112      	bne.n	800553c <__mdiff+0x3c>
 8005516:	4629      	mov	r1, r5
 8005518:	4630      	mov	r0, r6
 800551a:	f7ff fd63 	bl	8004fe4 <_Balloc>
 800551e:	4602      	mov	r2, r0
 8005520:	b928      	cbnz	r0, 800552e <__mdiff+0x2e>
 8005522:	f240 2137 	movw	r1, #567	@ 0x237
 8005526:	4b3e      	ldr	r3, [pc, #248]	@ (8005620 <__mdiff+0x120>)
 8005528:	483e      	ldr	r0, [pc, #248]	@ (8005624 <__mdiff+0x124>)
 800552a:	f000 f99b 	bl	8005864 <__assert_func>
 800552e:	2301      	movs	r3, #1
 8005530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005534:	4610      	mov	r0, r2
 8005536:	b003      	add	sp, #12
 8005538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553c:	bfbc      	itt	lt
 800553e:	464b      	movlt	r3, r9
 8005540:	46a1      	movlt	r9, r4
 8005542:	4630      	mov	r0, r6
 8005544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005548:	bfba      	itte	lt
 800554a:	461c      	movlt	r4, r3
 800554c:	2501      	movlt	r5, #1
 800554e:	2500      	movge	r5, #0
 8005550:	f7ff fd48 	bl	8004fe4 <_Balloc>
 8005554:	4602      	mov	r2, r0
 8005556:	b918      	cbnz	r0, 8005560 <__mdiff+0x60>
 8005558:	f240 2145 	movw	r1, #581	@ 0x245
 800555c:	4b30      	ldr	r3, [pc, #192]	@ (8005620 <__mdiff+0x120>)
 800555e:	e7e3      	b.n	8005528 <__mdiff+0x28>
 8005560:	f100 0b14 	add.w	fp, r0, #20
 8005564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005568:	f109 0310 	add.w	r3, r9, #16
 800556c:	60c5      	str	r5, [r0, #12]
 800556e:	f04f 0c00 	mov.w	ip, #0
 8005572:	f109 0514 	add.w	r5, r9, #20
 8005576:	46d9      	mov	r9, fp
 8005578:	6926      	ldr	r6, [r4, #16]
 800557a:	f104 0e14 	add.w	lr, r4, #20
 800557e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005582:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800558e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005592:	b281      	uxth	r1, r0
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	fa1f f38a 	uxth.w	r3, sl
 800559a:	1a5b      	subs	r3, r3, r1
 800559c:	0c00      	lsrs	r0, r0, #16
 800559e:	4463      	add	r3, ip
 80055a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80055a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80055ae:	4576      	cmp	r6, lr
 80055b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055b4:	f849 3b04 	str.w	r3, [r9], #4
 80055b8:	d8e6      	bhi.n	8005588 <__mdiff+0x88>
 80055ba:	1b33      	subs	r3, r6, r4
 80055bc:	3b15      	subs	r3, #21
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	3415      	adds	r4, #21
 80055c4:	3304      	adds	r3, #4
 80055c6:	42a6      	cmp	r6, r4
 80055c8:	bf38      	it	cc
 80055ca:	2304      	movcc	r3, #4
 80055cc:	441d      	add	r5, r3
 80055ce:	445b      	add	r3, fp
 80055d0:	461e      	mov	r6, r3
 80055d2:	462c      	mov	r4, r5
 80055d4:	4544      	cmp	r4, r8
 80055d6:	d30e      	bcc.n	80055f6 <__mdiff+0xf6>
 80055d8:	f108 0103 	add.w	r1, r8, #3
 80055dc:	1b49      	subs	r1, r1, r5
 80055de:	f021 0103 	bic.w	r1, r1, #3
 80055e2:	3d03      	subs	r5, #3
 80055e4:	45a8      	cmp	r8, r5
 80055e6:	bf38      	it	cc
 80055e8:	2100      	movcc	r1, #0
 80055ea:	440b      	add	r3, r1
 80055ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80055f0:	b199      	cbz	r1, 800561a <__mdiff+0x11a>
 80055f2:	6117      	str	r7, [r2, #16]
 80055f4:	e79e      	b.n	8005534 <__mdiff+0x34>
 80055f6:	46e6      	mov	lr, ip
 80055f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80055fc:	fa1f fc81 	uxth.w	ip, r1
 8005600:	44f4      	add	ip, lr
 8005602:	0c08      	lsrs	r0, r1, #16
 8005604:	4471      	add	r1, lr
 8005606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800560a:	b289      	uxth	r1, r1
 800560c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005614:	f846 1b04 	str.w	r1, [r6], #4
 8005618:	e7dc      	b.n	80055d4 <__mdiff+0xd4>
 800561a:	3f01      	subs	r7, #1
 800561c:	e7e6      	b.n	80055ec <__mdiff+0xec>
 800561e:	bf00      	nop
 8005620:	08005fb2 	.word	0x08005fb2
 8005624:	08005fc3 	.word	0x08005fc3

08005628 <__d2b>:
 8005628:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800562c:	2101      	movs	r1, #1
 800562e:	4690      	mov	r8, r2
 8005630:	4699      	mov	r9, r3
 8005632:	9e08      	ldr	r6, [sp, #32]
 8005634:	f7ff fcd6 	bl	8004fe4 <_Balloc>
 8005638:	4604      	mov	r4, r0
 800563a:	b930      	cbnz	r0, 800564a <__d2b+0x22>
 800563c:	4602      	mov	r2, r0
 800563e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005642:	4b23      	ldr	r3, [pc, #140]	@ (80056d0 <__d2b+0xa8>)
 8005644:	4823      	ldr	r0, [pc, #140]	@ (80056d4 <__d2b+0xac>)
 8005646:	f000 f90d 	bl	8005864 <__assert_func>
 800564a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800564e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005652:	b10d      	cbz	r5, 8005658 <__d2b+0x30>
 8005654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	f1b8 0300 	subs.w	r3, r8, #0
 800565e:	d024      	beq.n	80056aa <__d2b+0x82>
 8005660:	4668      	mov	r0, sp
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	f7ff fd85 	bl	8005172 <__lo0bits>
 8005668:	e9dd 1200 	ldrd	r1, r2, [sp]
 800566c:	b1d8      	cbz	r0, 80056a6 <__d2b+0x7e>
 800566e:	f1c0 0320 	rsb	r3, r0, #32
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	430b      	orrs	r3, r1
 8005678:	40c2      	lsrs	r2, r0
 800567a:	6163      	str	r3, [r4, #20]
 800567c:	9201      	str	r2, [sp, #4]
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf0c      	ite	eq
 8005684:	2201      	moveq	r2, #1
 8005686:	2202      	movne	r2, #2
 8005688:	61a3      	str	r3, [r4, #24]
 800568a:	6122      	str	r2, [r4, #16]
 800568c:	b1ad      	cbz	r5, 80056ba <__d2b+0x92>
 800568e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005692:	4405      	add	r5, r0
 8005694:	6035      	str	r5, [r6, #0]
 8005696:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800569a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800569c:	6018      	str	r0, [r3, #0]
 800569e:	4620      	mov	r0, r4
 80056a0:	b002      	add	sp, #8
 80056a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80056a6:	6161      	str	r1, [r4, #20]
 80056a8:	e7e9      	b.n	800567e <__d2b+0x56>
 80056aa:	a801      	add	r0, sp, #4
 80056ac:	f7ff fd61 	bl	8005172 <__lo0bits>
 80056b0:	9b01      	ldr	r3, [sp, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	6163      	str	r3, [r4, #20]
 80056b6:	3020      	adds	r0, #32
 80056b8:	e7e7      	b.n	800568a <__d2b+0x62>
 80056ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80056be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80056c2:	6030      	str	r0, [r6, #0]
 80056c4:	6918      	ldr	r0, [r3, #16]
 80056c6:	f7ff fd35 	bl	8005134 <__hi0bits>
 80056ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80056ce:	e7e4      	b.n	800569a <__d2b+0x72>
 80056d0:	08005fb2 	.word	0x08005fb2
 80056d4:	08005fc3 	.word	0x08005fc3

080056d8 <__sflush_r>:
 80056d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	0716      	lsls	r6, r2, #28
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	d454      	bmi.n	8005790 <__sflush_r+0xb8>
 80056e6:	684b      	ldr	r3, [r1, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc02      	bgt.n	80056f2 <__sflush_r+0x1a>
 80056ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd48      	ble.n	8005784 <__sflush_r+0xac>
 80056f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	d045      	beq.n	8005784 <__sflush_r+0xac>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056fe:	682f      	ldr	r7, [r5, #0]
 8005700:	6a21      	ldr	r1, [r4, #32]
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	d030      	beq.n	8005768 <__sflush_r+0x90>
 8005706:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	0759      	lsls	r1, r3, #29
 800570c:	d505      	bpl.n	800571a <__sflush_r+0x42>
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005714:	b10b      	cbz	r3, 800571a <__sflush_r+0x42>
 8005716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005718:	1ad2      	subs	r2, r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	4628      	mov	r0, r5
 800571e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005720:	6a21      	ldr	r1, [r4, #32]
 8005722:	47b0      	blx	r6
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	d106      	bne.n	8005738 <__sflush_r+0x60>
 800572a:	6829      	ldr	r1, [r5, #0]
 800572c:	291d      	cmp	r1, #29
 800572e:	d82b      	bhi.n	8005788 <__sflush_r+0xb0>
 8005730:	4a28      	ldr	r2, [pc, #160]	@ (80057d4 <__sflush_r+0xfc>)
 8005732:	40ca      	lsrs	r2, r1
 8005734:	07d6      	lsls	r6, r2, #31
 8005736:	d527      	bpl.n	8005788 <__sflush_r+0xb0>
 8005738:	2200      	movs	r2, #0
 800573a:	6062      	str	r2, [r4, #4]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	04d9      	lsls	r1, r3, #19
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	d504      	bpl.n	800574e <__sflush_r+0x76>
 8005744:	1c42      	adds	r2, r0, #1
 8005746:	d101      	bne.n	800574c <__sflush_r+0x74>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b903      	cbnz	r3, 800574e <__sflush_r+0x76>
 800574c:	6560      	str	r0, [r4, #84]	@ 0x54
 800574e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005750:	602f      	str	r7, [r5, #0]
 8005752:	b1b9      	cbz	r1, 8005784 <__sflush_r+0xac>
 8005754:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005758:	4299      	cmp	r1, r3
 800575a:	d002      	beq.n	8005762 <__sflush_r+0x8a>
 800575c:	4628      	mov	r0, r5
 800575e:	f7ff fb43 	bl	8004de8 <_free_r>
 8005762:	2300      	movs	r3, #0
 8005764:	6363      	str	r3, [r4, #52]	@ 0x34
 8005766:	e00d      	b.n	8005784 <__sflush_r+0xac>
 8005768:	2301      	movs	r3, #1
 800576a:	4628      	mov	r0, r5
 800576c:	47b0      	blx	r6
 800576e:	4602      	mov	r2, r0
 8005770:	1c50      	adds	r0, r2, #1
 8005772:	d1c9      	bne.n	8005708 <__sflush_r+0x30>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0c6      	beq.n	8005708 <__sflush_r+0x30>
 800577a:	2b1d      	cmp	r3, #29
 800577c:	d001      	beq.n	8005782 <__sflush_r+0xaa>
 800577e:	2b16      	cmp	r3, #22
 8005780:	d11d      	bne.n	80057be <__sflush_r+0xe6>
 8005782:	602f      	str	r7, [r5, #0]
 8005784:	2000      	movs	r0, #0
 8005786:	e021      	b.n	80057cc <__sflush_r+0xf4>
 8005788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800578c:	b21b      	sxth	r3, r3
 800578e:	e01a      	b.n	80057c6 <__sflush_r+0xee>
 8005790:	690f      	ldr	r7, [r1, #16]
 8005792:	2f00      	cmp	r7, #0
 8005794:	d0f6      	beq.n	8005784 <__sflush_r+0xac>
 8005796:	0793      	lsls	r3, r2, #30
 8005798:	bf18      	it	ne
 800579a:	2300      	movne	r3, #0
 800579c:	680e      	ldr	r6, [r1, #0]
 800579e:	bf08      	it	eq
 80057a0:	694b      	ldreq	r3, [r1, #20]
 80057a2:	1bf6      	subs	r6, r6, r7
 80057a4:	600f      	str	r7, [r1, #0]
 80057a6:	608b      	str	r3, [r1, #8]
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	ddeb      	ble.n	8005784 <__sflush_r+0xac>
 80057ac:	4633      	mov	r3, r6
 80057ae:	463a      	mov	r2, r7
 80057b0:	4628      	mov	r0, r5
 80057b2:	6a21      	ldr	r1, [r4, #32]
 80057b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80057b8:	47e0      	blx	ip
 80057ba:	2800      	cmp	r0, #0
 80057bc:	dc07      	bgt.n	80057ce <__sflush_r+0xf6>
 80057be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ce:	4407      	add	r7, r0
 80057d0:	1a36      	subs	r6, r6, r0
 80057d2:	e7e9      	b.n	80057a8 <__sflush_r+0xd0>
 80057d4:	20400001 	.word	0x20400001

080057d8 <_fflush_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	690b      	ldr	r3, [r1, #16]
 80057dc:	4605      	mov	r5, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b913      	cbnz	r3, 80057e8 <_fflush_r+0x10>
 80057e2:	2500      	movs	r5, #0
 80057e4:	4628      	mov	r0, r5
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	b118      	cbz	r0, 80057f2 <_fflush_r+0x1a>
 80057ea:	6a03      	ldr	r3, [r0, #32]
 80057ec:	b90b      	cbnz	r3, 80057f2 <_fflush_r+0x1a>
 80057ee:	f7fe fb95 	bl	8003f1c <__sinit>
 80057f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f3      	beq.n	80057e2 <_fflush_r+0xa>
 80057fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057fc:	07d0      	lsls	r0, r2, #31
 80057fe:	d404      	bmi.n	800580a <_fflush_r+0x32>
 8005800:	0599      	lsls	r1, r3, #22
 8005802:	d402      	bmi.n	800580a <_fflush_r+0x32>
 8005804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005806:	f7fe fc80 	bl	800410a <__retarget_lock_acquire_recursive>
 800580a:	4628      	mov	r0, r5
 800580c:	4621      	mov	r1, r4
 800580e:	f7ff ff63 	bl	80056d8 <__sflush_r>
 8005812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005814:	4605      	mov	r5, r0
 8005816:	07da      	lsls	r2, r3, #31
 8005818:	d4e4      	bmi.n	80057e4 <_fflush_r+0xc>
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	059b      	lsls	r3, r3, #22
 800581e:	d4e1      	bmi.n	80057e4 <_fflush_r+0xc>
 8005820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005822:	f7fe fc73 	bl	800410c <__retarget_lock_release_recursive>
 8005826:	e7dd      	b.n	80057e4 <_fflush_r+0xc>

08005828 <_sbrk_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	2300      	movs	r3, #0
 800582c:	4d05      	ldr	r5, [pc, #20]	@ (8005844 <_sbrk_r+0x1c>)
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fb fefa 	bl	800162c <_sbrk>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_sbrk_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_sbrk_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000440 	.word	0x20000440

08005848 <memcpy>:
 8005848:	440a      	add	r2, r1
 800584a:	4291      	cmp	r1, r2
 800584c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005850:	d100      	bne.n	8005854 <memcpy+0xc>
 8005852:	4770      	bx	lr
 8005854:	b510      	push	{r4, lr}
 8005856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800585a:	4291      	cmp	r1, r2
 800585c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005860:	d1f9      	bne.n	8005856 <memcpy+0xe>
 8005862:	bd10      	pop	{r4, pc}

08005864 <__assert_func>:
 8005864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005866:	4614      	mov	r4, r2
 8005868:	461a      	mov	r2, r3
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <__assert_func+0x2c>)
 800586c:	4605      	mov	r5, r0
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68d8      	ldr	r0, [r3, #12]
 8005872:	b14c      	cbz	r4, 8005888 <__assert_func+0x24>
 8005874:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <__assert_func+0x30>)
 8005876:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800587a:	9100      	str	r1, [sp, #0]
 800587c:	462b      	mov	r3, r5
 800587e:	4906      	ldr	r1, [pc, #24]	@ (8005898 <__assert_func+0x34>)
 8005880:	f000 f842 	bl	8005908 <fiprintf>
 8005884:	f000 f852 	bl	800592c <abort>
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <__assert_func+0x38>)
 800588a:	461c      	mov	r4, r3
 800588c:	e7f3      	b.n	8005876 <__assert_func+0x12>
 800588e:	bf00      	nop
 8005890:	20000020 	.word	0x20000020
 8005894:	08006026 	.word	0x08006026
 8005898:	08006033 	.word	0x08006033
 800589c:	08006061 	.word	0x08006061

080058a0 <_calloc_r>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	fba1 5402 	umull	r5, r4, r1, r2
 80058a6:	b934      	cbnz	r4, 80058b6 <_calloc_r+0x16>
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7ff fb0f 	bl	8004ecc <_malloc_r>
 80058ae:	4606      	mov	r6, r0
 80058b0:	b928      	cbnz	r0, 80058be <_calloc_r+0x1e>
 80058b2:	4630      	mov	r0, r6
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	220c      	movs	r2, #12
 80058b8:	2600      	movs	r6, #0
 80058ba:	6002      	str	r2, [r0, #0]
 80058bc:	e7f9      	b.n	80058b2 <_calloc_r+0x12>
 80058be:	462a      	mov	r2, r5
 80058c0:	4621      	mov	r1, r4
 80058c2:	f7fe fba4 	bl	800400e <memset>
 80058c6:	e7f4      	b.n	80058b2 <_calloc_r+0x12>

080058c8 <__ascii_mbtowc>:
 80058c8:	b082      	sub	sp, #8
 80058ca:	b901      	cbnz	r1, 80058ce <__ascii_mbtowc+0x6>
 80058cc:	a901      	add	r1, sp, #4
 80058ce:	b142      	cbz	r2, 80058e2 <__ascii_mbtowc+0x1a>
 80058d0:	b14b      	cbz	r3, 80058e6 <__ascii_mbtowc+0x1e>
 80058d2:	7813      	ldrb	r3, [r2, #0]
 80058d4:	600b      	str	r3, [r1, #0]
 80058d6:	7812      	ldrb	r2, [r2, #0]
 80058d8:	1e10      	subs	r0, r2, #0
 80058da:	bf18      	it	ne
 80058dc:	2001      	movne	r0, #1
 80058de:	b002      	add	sp, #8
 80058e0:	4770      	bx	lr
 80058e2:	4610      	mov	r0, r2
 80058e4:	e7fb      	b.n	80058de <__ascii_mbtowc+0x16>
 80058e6:	f06f 0001 	mvn.w	r0, #1
 80058ea:	e7f8      	b.n	80058de <__ascii_mbtowc+0x16>

080058ec <__ascii_wctomb>:
 80058ec:	4603      	mov	r3, r0
 80058ee:	4608      	mov	r0, r1
 80058f0:	b141      	cbz	r1, 8005904 <__ascii_wctomb+0x18>
 80058f2:	2aff      	cmp	r2, #255	@ 0xff
 80058f4:	d904      	bls.n	8005900 <__ascii_wctomb+0x14>
 80058f6:	228a      	movs	r2, #138	@ 0x8a
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4770      	bx	lr
 8005900:	2001      	movs	r0, #1
 8005902:	700a      	strb	r2, [r1, #0]
 8005904:	4770      	bx	lr
	...

08005908 <fiprintf>:
 8005908:	b40e      	push	{r1, r2, r3}
 800590a:	b503      	push	{r0, r1, lr}
 800590c:	4601      	mov	r1, r0
 800590e:	ab03      	add	r3, sp, #12
 8005910:	4805      	ldr	r0, [pc, #20]	@ (8005928 <fiprintf+0x20>)
 8005912:	f853 2b04 	ldr.w	r2, [r3], #4
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	f000 f835 	bl	8005988 <_vfiprintf_r>
 800591e:	b002      	add	sp, #8
 8005920:	f85d eb04 	ldr.w	lr, [sp], #4
 8005924:	b003      	add	sp, #12
 8005926:	4770      	bx	lr
 8005928:	20000020 	.word	0x20000020

0800592c <abort>:
 800592c:	2006      	movs	r0, #6
 800592e:	b508      	push	{r3, lr}
 8005930:	f000 f9fe 	bl	8005d30 <raise>
 8005934:	2001      	movs	r0, #1
 8005936:	f7fb fe04 	bl	8001542 <_exit>

0800593a <__sfputc_r>:
 800593a:	6893      	ldr	r3, [r2, #8]
 800593c:	b410      	push	{r4}
 800593e:	3b01      	subs	r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	6093      	str	r3, [r2, #8]
 8005944:	da07      	bge.n	8005956 <__sfputc_r+0x1c>
 8005946:	6994      	ldr	r4, [r2, #24]
 8005948:	42a3      	cmp	r3, r4
 800594a:	db01      	blt.n	8005950 <__sfputc_r+0x16>
 800594c:	290a      	cmp	r1, #10
 800594e:	d102      	bne.n	8005956 <__sfputc_r+0x1c>
 8005950:	bc10      	pop	{r4}
 8005952:	f000 b931 	b.w	8005bb8 <__swbuf_r>
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	1c58      	adds	r0, r3, #1
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	7019      	strb	r1, [r3, #0]
 800595e:	4608      	mov	r0, r1
 8005960:	bc10      	pop	{r4}
 8005962:	4770      	bx	lr

08005964 <__sfputs_r>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	4606      	mov	r6, r0
 8005968:	460f      	mov	r7, r1
 800596a:	4614      	mov	r4, r2
 800596c:	18d5      	adds	r5, r2, r3
 800596e:	42ac      	cmp	r4, r5
 8005970:	d101      	bne.n	8005976 <__sfputs_r+0x12>
 8005972:	2000      	movs	r0, #0
 8005974:	e007      	b.n	8005986 <__sfputs_r+0x22>
 8005976:	463a      	mov	r2, r7
 8005978:	4630      	mov	r0, r6
 800597a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597e:	f7ff ffdc 	bl	800593a <__sfputc_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d1f3      	bne.n	800596e <__sfputs_r+0xa>
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005988 <_vfiprintf_r>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	460d      	mov	r5, r1
 800598e:	4614      	mov	r4, r2
 8005990:	4698      	mov	r8, r3
 8005992:	4606      	mov	r6, r0
 8005994:	b09d      	sub	sp, #116	@ 0x74
 8005996:	b118      	cbz	r0, 80059a0 <_vfiprintf_r+0x18>
 8005998:	6a03      	ldr	r3, [r0, #32]
 800599a:	b90b      	cbnz	r3, 80059a0 <_vfiprintf_r+0x18>
 800599c:	f7fe fabe 	bl	8003f1c <__sinit>
 80059a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059a2:	07d9      	lsls	r1, r3, #31
 80059a4:	d405      	bmi.n	80059b2 <_vfiprintf_r+0x2a>
 80059a6:	89ab      	ldrh	r3, [r5, #12]
 80059a8:	059a      	lsls	r2, r3, #22
 80059aa:	d402      	bmi.n	80059b2 <_vfiprintf_r+0x2a>
 80059ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ae:	f7fe fbac 	bl	800410a <__retarget_lock_acquire_recursive>
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	071b      	lsls	r3, r3, #28
 80059b6:	d501      	bpl.n	80059bc <_vfiprintf_r+0x34>
 80059b8:	692b      	ldr	r3, [r5, #16]
 80059ba:	b99b      	cbnz	r3, 80059e4 <_vfiprintf_r+0x5c>
 80059bc:	4629      	mov	r1, r5
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 f938 	bl	8005c34 <__swsetup_r>
 80059c4:	b170      	cbz	r0, 80059e4 <_vfiprintf_r+0x5c>
 80059c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059c8:	07dc      	lsls	r4, r3, #31
 80059ca:	d504      	bpl.n	80059d6 <_vfiprintf_r+0x4e>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	b01d      	add	sp, #116	@ 0x74
 80059d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	0598      	lsls	r0, r3, #22
 80059da:	d4f7      	bmi.n	80059cc <_vfiprintf_r+0x44>
 80059dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059de:	f7fe fb95 	bl	800410c <__retarget_lock_release_recursive>
 80059e2:	e7f3      	b.n	80059cc <_vfiprintf_r+0x44>
 80059e4:	2300      	movs	r3, #0
 80059e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059e8:	2320      	movs	r3, #32
 80059ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059ee:	2330      	movs	r3, #48	@ 0x30
 80059f0:	f04f 0901 	mov.w	r9, #1
 80059f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005ba4 <_vfiprintf_r+0x21c>
 80059fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a00:	4623      	mov	r3, r4
 8005a02:	469a      	mov	sl, r3
 8005a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a08:	b10a      	cbz	r2, 8005a0e <_vfiprintf_r+0x86>
 8005a0a:	2a25      	cmp	r2, #37	@ 0x25
 8005a0c:	d1f9      	bne.n	8005a02 <_vfiprintf_r+0x7a>
 8005a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a12:	d00b      	beq.n	8005a2c <_vfiprintf_r+0xa4>
 8005a14:	465b      	mov	r3, fp
 8005a16:	4622      	mov	r2, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ffa2 	bl	8005964 <__sfputs_r>
 8005a20:	3001      	adds	r0, #1
 8005a22:	f000 80a7 	beq.w	8005b74 <_vfiprintf_r+0x1ec>
 8005a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a28:	445a      	add	r2, fp
 8005a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 809f 	beq.w	8005b74 <_vfiprintf_r+0x1ec>
 8005a36:	2300      	movs	r3, #0
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a40:	f10a 0a01 	add.w	sl, sl, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a4e:	4654      	mov	r4, sl
 8005a50:	2205      	movs	r2, #5
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	4853      	ldr	r0, [pc, #332]	@ (8005ba4 <_vfiprintf_r+0x21c>)
 8005a58:	f7fe fb59 	bl	800410e <memchr>
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	b9d8      	cbnz	r0, 8005a98 <_vfiprintf_r+0x110>
 8005a60:	06d1      	lsls	r1, r2, #27
 8005a62:	bf44      	itt	mi
 8005a64:	2320      	movmi	r3, #32
 8005a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a6a:	0713      	lsls	r3, r2, #28
 8005a6c:	bf44      	itt	mi
 8005a6e:	232b      	movmi	r3, #43	@ 0x2b
 8005a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a7a:	d015      	beq.n	8005aa8 <_vfiprintf_r+0x120>
 8005a7c:	4654      	mov	r4, sl
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f04f 0c0a 	mov.w	ip, #10
 8005a84:	9a07      	ldr	r2, [sp, #28]
 8005a86:	4621      	mov	r1, r4
 8005a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8c:	3b30      	subs	r3, #48	@ 0x30
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d94b      	bls.n	8005b2a <_vfiprintf_r+0x1a2>
 8005a92:	b1b0      	cbz	r0, 8005ac2 <_vfiprintf_r+0x13a>
 8005a94:	9207      	str	r2, [sp, #28]
 8005a96:	e014      	b.n	8005ac2 <_vfiprintf_r+0x13a>
 8005a98:	eba0 0308 	sub.w	r3, r0, r8
 8005a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	46a2      	mov	sl, r4
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	e7d2      	b.n	8005a4e <_vfiprintf_r+0xc6>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfbb      	ittet	lt
 8005ab4:	425b      	neglt	r3, r3
 8005ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aba:	9307      	strge	r3, [sp, #28]
 8005abc:	9307      	strlt	r3, [sp, #28]
 8005abe:	bfb8      	it	lt
 8005ac0:	9204      	strlt	r2, [sp, #16]
 8005ac2:	7823      	ldrb	r3, [r4, #0]
 8005ac4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ac6:	d10a      	bne.n	8005ade <_vfiprintf_r+0x156>
 8005ac8:	7863      	ldrb	r3, [r4, #1]
 8005aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005acc:	d132      	bne.n	8005b34 <_vfiprintf_r+0x1ac>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	3402      	adds	r4, #2
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	9203      	str	r2, [sp, #12]
 8005ad8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005adc:	9305      	str	r3, [sp, #20]
 8005ade:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005ba8 <_vfiprintf_r+0x220>
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	7821      	ldrb	r1, [r4, #0]
 8005ae8:	f7fe fb11 	bl	800410e <memchr>
 8005aec:	b138      	cbz	r0, 8005afe <_vfiprintf_r+0x176>
 8005aee:	2240      	movs	r2, #64	@ 0x40
 8005af0:	9b04      	ldr	r3, [sp, #16]
 8005af2:	eba0 000a 	sub.w	r0, r0, sl
 8005af6:	4082      	lsls	r2, r0
 8005af8:	4313      	orrs	r3, r2
 8005afa:	3401      	adds	r4, #1
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b02:	2206      	movs	r2, #6
 8005b04:	4829      	ldr	r0, [pc, #164]	@ (8005bac <_vfiprintf_r+0x224>)
 8005b06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b0a:	f7fe fb00 	bl	800410e <memchr>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d03f      	beq.n	8005b92 <_vfiprintf_r+0x20a>
 8005b12:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <_vfiprintf_r+0x228>)
 8005b14:	bb1b      	cbnz	r3, 8005b5e <_vfiprintf_r+0x1d6>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	3307      	adds	r3, #7
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	3308      	adds	r3, #8
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b24:	443b      	add	r3, r7
 8005b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b28:	e76a      	b.n	8005a00 <_vfiprintf_r+0x78>
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b32:	e7a8      	b.n	8005a86 <_vfiprintf_r+0xfe>
 8005b34:	2300      	movs	r3, #0
 8005b36:	f04f 0c0a 	mov.w	ip, #10
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	3401      	adds	r4, #1
 8005b3e:	9305      	str	r3, [sp, #20]
 8005b40:	4620      	mov	r0, r4
 8005b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b46:	3a30      	subs	r2, #48	@ 0x30
 8005b48:	2a09      	cmp	r2, #9
 8005b4a:	d903      	bls.n	8005b54 <_vfiprintf_r+0x1cc>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0c6      	beq.n	8005ade <_vfiprintf_r+0x156>
 8005b50:	9105      	str	r1, [sp, #20]
 8005b52:	e7c4      	b.n	8005ade <_vfiprintf_r+0x156>
 8005b54:	4604      	mov	r4, r0
 8005b56:	2301      	movs	r3, #1
 8005b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b5c:	e7f0      	b.n	8005b40 <_vfiprintf_r+0x1b8>
 8005b5e:	ab03      	add	r3, sp, #12
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	462a      	mov	r2, r5
 8005b64:	4630      	mov	r0, r6
 8005b66:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <_vfiprintf_r+0x22c>)
 8005b68:	a904      	add	r1, sp, #16
 8005b6a:	f7fd fd8f 	bl	800368c <_printf_float>
 8005b6e:	4607      	mov	r7, r0
 8005b70:	1c78      	adds	r0, r7, #1
 8005b72:	d1d6      	bne.n	8005b22 <_vfiprintf_r+0x19a>
 8005b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b76:	07d9      	lsls	r1, r3, #31
 8005b78:	d405      	bmi.n	8005b86 <_vfiprintf_r+0x1fe>
 8005b7a:	89ab      	ldrh	r3, [r5, #12]
 8005b7c:	059a      	lsls	r2, r3, #22
 8005b7e:	d402      	bmi.n	8005b86 <_vfiprintf_r+0x1fe>
 8005b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b82:	f7fe fac3 	bl	800410c <__retarget_lock_release_recursive>
 8005b86:	89ab      	ldrh	r3, [r5, #12]
 8005b88:	065b      	lsls	r3, r3, #25
 8005b8a:	f53f af1f 	bmi.w	80059cc <_vfiprintf_r+0x44>
 8005b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b90:	e71e      	b.n	80059d0 <_vfiprintf_r+0x48>
 8005b92:	ab03      	add	r3, sp, #12
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	462a      	mov	r2, r5
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <_vfiprintf_r+0x22c>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	f7fe f813 	bl	8003bc8 <_printf_i>
 8005ba2:	e7e4      	b.n	8005b6e <_vfiprintf_r+0x1e6>
 8005ba4:	08006062 	.word	0x08006062
 8005ba8:	08006068 	.word	0x08006068
 8005bac:	0800606c 	.word	0x0800606c
 8005bb0:	0800368d 	.word	0x0800368d
 8005bb4:	08005965 	.word	0x08005965

08005bb8 <__swbuf_r>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	460e      	mov	r6, r1
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	b118      	cbz	r0, 8005bca <__swbuf_r+0x12>
 8005bc2:	6a03      	ldr	r3, [r0, #32]
 8005bc4:	b90b      	cbnz	r3, 8005bca <__swbuf_r+0x12>
 8005bc6:	f7fe f9a9 	bl	8003f1c <__sinit>
 8005bca:	69a3      	ldr	r3, [r4, #24]
 8005bcc:	60a3      	str	r3, [r4, #8]
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	071a      	lsls	r2, r3, #28
 8005bd2:	d501      	bpl.n	8005bd8 <__swbuf_r+0x20>
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	b943      	cbnz	r3, 8005bea <__swbuf_r+0x32>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 f82a 	bl	8005c34 <__swsetup_r>
 8005be0:	b118      	cbz	r0, 8005bea <__swbuf_r+0x32>
 8005be2:	f04f 37ff 	mov.w	r7, #4294967295
 8005be6:	4638      	mov	r0, r7
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	6922      	ldr	r2, [r4, #16]
 8005bee:	b2f6      	uxtb	r6, r6
 8005bf0:	1a98      	subs	r0, r3, r2
 8005bf2:	6963      	ldr	r3, [r4, #20]
 8005bf4:	4637      	mov	r7, r6
 8005bf6:	4283      	cmp	r3, r0
 8005bf8:	dc05      	bgt.n	8005c06 <__swbuf_r+0x4e>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f7ff fdeb 	bl	80057d8 <_fflush_r>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d1ed      	bne.n	8005be2 <__swbuf_r+0x2a>
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	60a3      	str	r3, [r4, #8]
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	6022      	str	r2, [r4, #0]
 8005c12:	701e      	strb	r6, [r3, #0]
 8005c14:	6962      	ldr	r2, [r4, #20]
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d004      	beq.n	8005c26 <__swbuf_r+0x6e>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d5e1      	bpl.n	8005be6 <__swbuf_r+0x2e>
 8005c22:	2e0a      	cmp	r6, #10
 8005c24:	d1df      	bne.n	8005be6 <__swbuf_r+0x2e>
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f7ff fdd5 	bl	80057d8 <_fflush_r>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0d9      	beq.n	8005be6 <__swbuf_r+0x2e>
 8005c32:	e7d6      	b.n	8005be2 <__swbuf_r+0x2a>

08005c34 <__swsetup_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4b29      	ldr	r3, [pc, #164]	@ (8005cdc <__swsetup_r+0xa8>)
 8005c38:	4605      	mov	r5, r0
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	b118      	cbz	r0, 8005c48 <__swsetup_r+0x14>
 8005c40:	6a03      	ldr	r3, [r0, #32]
 8005c42:	b90b      	cbnz	r3, 8005c48 <__swsetup_r+0x14>
 8005c44:	f7fe f96a 	bl	8003f1c <__sinit>
 8005c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4c:	0719      	lsls	r1, r3, #28
 8005c4e:	d422      	bmi.n	8005c96 <__swsetup_r+0x62>
 8005c50:	06da      	lsls	r2, r3, #27
 8005c52:	d407      	bmi.n	8005c64 <__swsetup_r+0x30>
 8005c54:	2209      	movs	r2, #9
 8005c56:	602a      	str	r2, [r5, #0]
 8005c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	e033      	b.n	8005ccc <__swsetup_r+0x98>
 8005c64:	0758      	lsls	r0, r3, #29
 8005c66:	d512      	bpl.n	8005c8e <__swsetup_r+0x5a>
 8005c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c6a:	b141      	cbz	r1, 8005c7e <__swsetup_r+0x4a>
 8005c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c70:	4299      	cmp	r1, r3
 8005c72:	d002      	beq.n	8005c7a <__swsetup_r+0x46>
 8005c74:	4628      	mov	r0, r5
 8005c76:	f7ff f8b7 	bl	8004de8 <_free_r>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	2300      	movs	r3, #0
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	b94b      	cbnz	r3, 8005cae <__swsetup_r+0x7a>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca4:	d003      	beq.n	8005cae <__swsetup_r+0x7a>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f882 	bl	8005db2 <__smakebuf_r>
 8005cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb2:	f013 0201 	ands.w	r2, r3, #1
 8005cb6:	d00a      	beq.n	8005cce <__swsetup_r+0x9a>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	60a2      	str	r2, [r4, #8]
 8005cbc:	6962      	ldr	r2, [r4, #20]
 8005cbe:	4252      	negs	r2, r2
 8005cc0:	61a2      	str	r2, [r4, #24]
 8005cc2:	6922      	ldr	r2, [r4, #16]
 8005cc4:	b942      	cbnz	r2, 8005cd8 <__swsetup_r+0xa4>
 8005cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cca:	d1c5      	bne.n	8005c58 <__swsetup_r+0x24>
 8005ccc:	bd38      	pop	{r3, r4, r5, pc}
 8005cce:	0799      	lsls	r1, r3, #30
 8005cd0:	bf58      	it	pl
 8005cd2:	6962      	ldrpl	r2, [r4, #20]
 8005cd4:	60a2      	str	r2, [r4, #8]
 8005cd6:	e7f4      	b.n	8005cc2 <__swsetup_r+0x8e>
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7f7      	b.n	8005ccc <__swsetup_r+0x98>
 8005cdc:	20000020 	.word	0x20000020

08005ce0 <_raise_r>:
 8005ce0:	291f      	cmp	r1, #31
 8005ce2:	b538      	push	{r3, r4, r5, lr}
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	d904      	bls.n	8005cf4 <_raise_r+0x14>
 8005cea:	2316      	movs	r3, #22
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005cf6:	b112      	cbz	r2, 8005cfe <_raise_r+0x1e>
 8005cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cfc:	b94b      	cbnz	r3, 8005d12 <_raise_r+0x32>
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f000 f830 	bl	8005d64 <_getpid_r>
 8005d04:	4622      	mov	r2, r4
 8005d06:	4601      	mov	r1, r0
 8005d08:	4628      	mov	r0, r5
 8005d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d0e:	f000 b817 	b.w	8005d40 <_kill_r>
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d00a      	beq.n	8005d2c <_raise_r+0x4c>
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	d103      	bne.n	8005d22 <_raise_r+0x42>
 8005d1a:	2316      	movs	r3, #22
 8005d1c:	6003      	str	r3, [r0, #0]
 8005d1e:	2001      	movs	r0, #1
 8005d20:	e7e7      	b.n	8005cf2 <_raise_r+0x12>
 8005d22:	2100      	movs	r1, #0
 8005d24:	4620      	mov	r0, r4
 8005d26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d2a:	4798      	blx	r3
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e7e0      	b.n	8005cf2 <_raise_r+0x12>

08005d30 <raise>:
 8005d30:	4b02      	ldr	r3, [pc, #8]	@ (8005d3c <raise+0xc>)
 8005d32:	4601      	mov	r1, r0
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f7ff bfd3 	b.w	8005ce0 <_raise_r>
 8005d3a:	bf00      	nop
 8005d3c:	20000020 	.word	0x20000020

08005d40 <_kill_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d06      	ldr	r5, [pc, #24]	@ (8005d60 <_kill_r+0x20>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	f7fb fbe8 	bl	8001522 <_kill>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d102      	bne.n	8005d5c <_kill_r+0x1c>
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	b103      	cbz	r3, 8005d5c <_kill_r+0x1c>
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000440 	.word	0x20000440

08005d64 <_getpid_r>:
 8005d64:	f7fb bbd6 	b.w	8001514 <_getpid>

08005d68 <__swhatbuf_r>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d70:	4615      	mov	r5, r2
 8005d72:	2900      	cmp	r1, #0
 8005d74:	461e      	mov	r6, r3
 8005d76:	b096      	sub	sp, #88	@ 0x58
 8005d78:	da0c      	bge.n	8005d94 <__swhatbuf_r+0x2c>
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d82:	bf14      	ite	ne
 8005d84:	2340      	movne	r3, #64	@ 0x40
 8005d86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	6031      	str	r1, [r6, #0]
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	b016      	add	sp, #88	@ 0x58
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	466a      	mov	r2, sp
 8005d96:	f000 f849 	bl	8005e2c <_fstat_r>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	dbed      	blt.n	8005d7a <__swhatbuf_r+0x12>
 8005d9e:	9901      	ldr	r1, [sp, #4]
 8005da0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005da4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005da8:	4259      	negs	r1, r3
 8005daa:	4159      	adcs	r1, r3
 8005dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005db0:	e7eb      	b.n	8005d8a <__swhatbuf_r+0x22>

08005db2 <__smakebuf_r>:
 8005db2:	898b      	ldrh	r3, [r1, #12]
 8005db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005db6:	079d      	lsls	r5, r3, #30
 8005db8:	4606      	mov	r6, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	d507      	bpl.n	8005dce <__smakebuf_r+0x1c>
 8005dbe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	6163      	str	r3, [r4, #20]
 8005dca:	b003      	add	sp, #12
 8005dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dce:	466a      	mov	r2, sp
 8005dd0:	ab01      	add	r3, sp, #4
 8005dd2:	f7ff ffc9 	bl	8005d68 <__swhatbuf_r>
 8005dd6:	9f00      	ldr	r7, [sp, #0]
 8005dd8:	4605      	mov	r5, r0
 8005dda:	4639      	mov	r1, r7
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f7ff f875 	bl	8004ecc <_malloc_r>
 8005de2:	b948      	cbnz	r0, 8005df8 <__smakebuf_r+0x46>
 8005de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de8:	059a      	lsls	r2, r3, #22
 8005dea:	d4ee      	bmi.n	8005dca <__smakebuf_r+0x18>
 8005dec:	f023 0303 	bic.w	r3, r3, #3
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	e7e2      	b.n	8005dbe <__smakebuf_r+0xc>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	6020      	str	r0, [r4, #0]
 8005e08:	b15b      	cbz	r3, 8005e22 <__smakebuf_r+0x70>
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e10:	f000 f81e 	bl	8005e50 <_isatty_r>
 8005e14:	b128      	cbz	r0, 8005e22 <__smakebuf_r+0x70>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f023 0303 	bic.w	r3, r3, #3
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	431d      	orrs	r5, r3
 8005e26:	81a5      	strh	r5, [r4, #12]
 8005e28:	e7cf      	b.n	8005dca <__smakebuf_r+0x18>
	...

08005e2c <_fstat_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4d06      	ldr	r5, [pc, #24]	@ (8005e4c <_fstat_r+0x20>)
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	f7fb fbd1 	bl	80015e0 <_fstat>
 8005e3e:	1c43      	adds	r3, r0, #1
 8005e40:	d102      	bne.n	8005e48 <_fstat_r+0x1c>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	b103      	cbz	r3, 8005e48 <_fstat_r+0x1c>
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	bd38      	pop	{r3, r4, r5, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000440 	.word	0x20000440

08005e50 <_isatty_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	2300      	movs	r3, #0
 8005e54:	4d05      	ldr	r5, [pc, #20]	@ (8005e6c <_isatty_r+0x1c>)
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fb fbcf 	bl	80015fe <_isatty>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_isatty_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_isatty_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20000440 	.word	0x20000440

08005e70 <_init>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr

08005e7c <_fini>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr
